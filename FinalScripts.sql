Create database NeoBank;
GO
USE NeoBank;


----DROP TABLE CUSTOMER;
create TABLE  CUSTOMER(
CUSTOMERID INT  NOT NULL PRIMARY KEY,
FIRSTNAME VARCHAR(100),
LASTNAME VARCHAR(100),
DOB DATE,
SSN  VARCHAR(9) NOT NULL,
PHONENUMBER  VARCHAR(10) NOT NULL,
CREDITSCORE INT,
EMAILID VARCHAR(35),
IDENTIFICATIONDOCUMENT VARCHAR(35),
IDENTIFICATIONID VARCHAR(35));

ALTER TABLE dbo.Customer ADD SSN_ENCRYPT varbinary(MAX);


----DROP TABLE CREDENTIALS;

CREATE TABLE CREDENTIALS(
CREDENTIALID INT NOT NULL PRIMARY KEY,
CUSTOMERID INT REFERENCES CUSTOMER(CUSTOMERID),
USERNAME VARCHAR (20) NOT NULL,
PASSWORD VARCHAR (20) NOT NULL,
CUSTOMERTYPE VARCHAR(10) NOT NULL
);


----DROP TABLE ACCOUNT;
CREATE TABLE ACCOUNT(
ACCOUNTID INT NOT NULL PRIMARY KEY,
CUSTOMERID INT  NOT NULL,
ACCOUNTTYPE VARCHAR (20),
BALANCE MONEY
);


--DROP TABLE TRANSACTIONS;
CREATE TABLE TRANSACTIONS(
TRANSACTIONID INT IDENTITY NOT NULL PRIMARY KEY,
ACCOUNTID INT NOT NULL,
TOACCOUNTID INT NOT NULL,
AMOUNTTRANSFERED MONEY NOT NULL,
TRANSACTIONTIME DATETIME,
MESSAGE VARCHAR (100),
DIRECTION VARCHAR (10)
);




--DROP TABLE CUSTOMERADDRESS;
CREATE TABLE CUSTOMERADDRESS(
    ADDRESSID INT NOT NULL PRIMARY KEY,
    CUSTOMERID INT NOT NULL FOREIGN KEY REFERENCES CUSTOMER(CUSTOMERID),
    ADDRESSTYPE VARCHAR(25),
    STREETNAME VARCHAR(25),
    CITY VARCHAR(25) CHECK (CUSTOMERADDRESS.CITY IN ('Albany', 'Trenton', 'Santa Fe', 'Providence', 'Austin', 'Olympia', 'Columbia', 'Concord', 'Jackson', 'Lansing')),
    STATE VARCHAR(25) CHECK (CUSTOMERADDRESS.STATE IN ('New York', 'New Jersey', 'New Mexico', 'Rhode Island', 'Texas', 'Washington', 'South Carolina', 'New Hampshire', 'Mississippi', 'Michigan')),
    ZIP INT CHECK (CUSTOMERADDRESS.ZIP BETWEEN 10000 AND 99999)
);

--DROP TABLE CUSTOMERBENIFICIERIES;
CREATE TABLE CUSTOMERBENIFICIERIES(
BENIFICIERYID INT NOT NULL PRIMARY KEY,
CUSTOMERID INT FOREIGN KEY REFERENCES CUSTOMER(CUSTOMERID),
NICKNAME VARCHAR(25),
ACCOUNTID INT
);

--DROP TABLE PREVIOUSORDERHISTORY;
CREATE TABLE PREVIOUSORDERHISTORY(
PREVIOUSORDERID  INT PRIMARY KEY NOT NULL IDENTITY,
CUSTOMERID INT FOREIGN KEY REFERENCES CUSTOMER(CUSTOMERID),
ID INT,
NAME VARCHAR(100),
BUYSELLPRICE MONEY,
QUANTITY INT,
CURRENTTIME DATE,
STATUS VARCHAR(20)
);

--DROP TABLE STOCKS
CREATE TABLE STOCKS(
ID INT NOT NULL PRIMARY KEY,
STOCKNAME VARCHAR(20),
STOCKPRICE MONEY,
TICKERSYMBOL VARCHAR(10));

--DROP TABLE BONDS
CREATE TABLE BONDS(
ID INT  PRIMARY KEY,
BONDNAME VARCHAR(100),
BONDPRICE MONEY,
MATURITYDATE DATE,
BONDYIELD FLOAT);

--DROP TABLE COMMODITY
CREATE TABLE COMMODITY(
ID INT PRIMARY KEY,
COMMODITYNAME VARCHAR(20),
COMMODITYPRICE MONEY);

--DROP TABLE CUSTOMERPORTFOLIO
CREATE TABLE CUSTOMERPORTFOLIO(
PORTFOLIOID INT PRIMARY KEY IDENTITY,
CUSTOMERID INT NOT NULL FOREIGN KEY REFERENCES CUSTOMER(CUSTOMERID),
ID INT,
NAME VARCHAR(100),
AVGBUYSELLPRICE MONEY,
AVGQUANTITY INT,
CURRENTPRICE MONEY,
PROFITLOSS FLOAT
);

--DROP TABLE CUSTOMERASSETS
CREATE TABLE CUSTOMERASSETS(
ASSETID INT PRIMARY KEY,
CUSTOMERID INT NOT NULL FOREIGN KEY REFERENCES CUSTOMER(CUSTOMERID),
ASSETTYPE VARCHAR(20),
ASSETIMAGE BINARY(8000),
ASSETVALUE MONEY
);

--DROP TABLE dbo.LOANREQUESTS;
CREATE TABLE NeoBank.dbo.LOANREQUESTS(
LOANID INT NOT NULL PRIMARY KEY,
LOANDURATION INT NOT NULL,
CUSTOMERID INT NOT NULL FOREIGN KEY REFERENCES NeoBank.dbo.CUSTOMER(CUSTOMERID),
INTERESTRATE FLOAT  NOT NULL,
LOANAMOUNT MONEY NOT NULL,
AMOUNTTOREPAY MONEY,
STATUS VARCHAR(20) NOT NULL );

--DROP TABLE dbo.FOREXCURRENCIES;
CREATE TABLE NeoBank.dbo.FOREXCURRENCIES(
FOREXID INT NOT NULL PRIMARY KEY,
CURRENCYNAME  VARCHAR(20) NOT NULL,
EXCHANGERATE FLOAT  NOT NULL);

--DROP TABLE dbo.FOREXCARDREQUESTS;
CREATE TABLE NeoBank.dbo.FOREXCARDREQUESTS(
REQUESTID INT NOT NULL PRIMARY KEY,
CUSTOMERID INT NOT NULL FOREIGN KEY REFERENCES NeoBank.dbo.CUSTOMER(CUSTOMERID),
FOREXID INT NOT NULL FOREIGN KEY REFERENCES NeoBank.dbo.FOREXCURRENCIES(FOREXID),
INITIALAMOUNT MONEY NOT NULL,
REQUESTTIME DATETIME NOT NULL,
STATUS VARCHAR(10) NOT NULL);




--DROP TABLE dbo.CASHIERREQUESTS;
CREATE TABLE NeoBank.dbo.CASHIERREQUESTS(
DEPOSITREQUESTID INT NOT NULL PRIMARY KEY,
CUSTOMERID INT NOT NULL FOREIGN KEY REFERENCES NeoBank.dbo.CUSTOMER(CUSTOMERID),
AMOUNTTODEPOSIT MONEY NOT NULL,
REQUESTTIME DATETIME NOT NULL,
STATUS VARCHAR(20) NOT NULL,
MESSAGE VARCHAR(100) NOT NULL);

-------ENCRYPTION------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Encryption code

-- Create certificate to protect symmetric key
CREATE MASTER KEY
ENCRYPTION BY PASSWORD = 'Team10_P@ss';

CREATE CERTIFICATE Team10_Certificate
WITH SUBJECT = 'Project Team10 Certificate',
EXPIRY_DATE = '2026-10-31'

-- Create symmetric key to encrypt data
CREATE SYMMETRIC KEY Team10_SymmetricKey
WITH ALGORITHM = AES_128
ENCRYPTION BY CERTIFICATE Team10_Certificate

-- Open symmetric key
OPEN SYMMETRIC KEY Team10_SymmetricKey
DECRYPTION BY CERTIFICATE Team10_Certificate



--------TABLE LEVEL CONSTRAINTS --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


---TO CHECK IF THE BENEFICIARY ACCOUNT EXISTS IN THE DATABASE-----------
GO
CREATE FUNCTION CHECKBENIFICIERYACCOUNTID(@ACCOUNTID INT)
RETURNS VARCHAR(5)
AS
BEGIN
   DECLARE @ifExists VARCHAR(5);
   DECLARE @count INT=0;
    select @count = count(*) from Account where AccountID = @ACCOUNTID;
      if @count>0
      BEGIN
      SET @ifExists='True'
      END
      else
      BEGIN
      SET @ifExists='False'
      END

   RETURN @ifExists;
END;
GO

GO
ALTER TABLE CUSTOMERBENIFICIERIES WITH CHECK ADD CONSTRAINT CHECKBENIFICIERYACCOUNTID_Constraint CHECK (dbo.CHECKBENIFICIERYACCOUNTID(ACCOUNTID) = 'true')
GO



----TO CHECK IF THE CUSTOMER HAS GOOD CREDIT SCORE -----------
GO
CREATE FUNCTION CheckCreditScore (@CustomerID INT)
RETURNS INT
AS
BEGIN
      DECLARE @flag smallint=0, @SCORE INT =0;
      SET @SCORE = (SELECT CREDITSCORE
          FROM NeoBank.dbo.CUSTOMER
          WHERE CUSTOMERID = @CustomerID);
          IF @SCORE<500
      BEGIN
      SET @flag = 1
      END
      ELSE
      BEGIN
      SET @flag = 0
      END
   RETURN @flag;
END;
GO

--DROP FUNCTION CheckCreditScore
GO
ALTER TABLE NeoBank.dbo.LOANREQUESTS WITH CHECK ADD CONSTRAINT LOANCREDIT CHECK ([dbo].CheckCreditScore(CUSTOMERID) = 0)
GO



---TO CHECK IF CUSTOMER HAS AN EXISTING LOAN -------------
GO
CREATE FUNCTION CheckLoanStatus (@CustomerID INT)
RETURNS INT
AS
BEGIN
   DECLARE @flag smallint=0, @COUNT smallint=0;
   SELECT @COUNT = COUNT(CUSTOMERID)
          FROM NeoBank.dbo.LOANREQUESTS
          WHERE CUSTOMERID = @CustomerID;
          IF @count>1
      BEGIN
      SET @flag = 1
      END
      ELSE
      BEGIN
      SET @flag = 0
      END
   RETURN @flag;
END;
GO

GO
ALTER TABLE NeoBank.dbo.LOANREQUESTS WITH CHECK ADD CONSTRAINT lOANSTATUSCHECKer CHECK ([dbo].CheckLoanStatus(CUSTOMERID) = 0)
GO



-- Constraint to prevent duplicate requests being made by the same customer
GO
CREATE FUNCTION CheckDuplicateForexRequests(@CustId INT, @ForexId INT) RETURNS INT
AS
BEGIN
	DECLARE @Count INT;
	DECLARE @HasDuplicate INT = 0;

	SET @Count = (SELECT COUNT(*) FROM FOREXCARDREQUESTS WHERE CUSTOMERID = @CustId AND FOREXID = @ForexId);
	IF(@Count > 1)
	BEGIN
		SET @HasDuplicate = 1;
	END
	ELSE 
	BEGIN
		SET @HasDuplicate = 0;
	END
   RETURN @HasDuplicate;
END;
GO

GO
ALTER TABLE dbo.FOREXCARDREQUESTS WITH CHECK ADD CONSTRAINT prevent_if_duplicate_request_constraint CHECK ([dbo].CheckDuplicateForexRequests(CustomerID, FOREXID) = 0)
GO



--TRIGGERS------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



--DROP TRIGGER ENCRYPTSSN
GO
CREATE TRIGGER dbo.ENCRYPTSSN
ON dbo.CUSTOMER AFTER INSERT, UPDATE
AS BEGIN
OPEN SYMMETRIC KEY Team10_SymmetricKey
DECRYPTION BY CERTIFICATE Team10_Certificate
    IF EXISTS (SELECT * FROM Inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
    DECLARE @data VARCHAR(30);
    select @data=SSN from Customer where customerid=(SELECT customerid FROM INSERTED);
    Update  Customer set SSN_encrypt=EncryptByKey (Key_GUID(N'Team10_SymmetricKey'), @data)
                where CUSTOMERID=(SELECT customerid FROM INSERTED);

    CLOSE SYMMETRIC KEY Team10_SymmetricKey;            
    END
END;
GO




--TRIGGER FOR AMOUNT TO REPAY IN LOAN REQUESTS
GO
CREATE TRIGGER dbo.LOANREQUESTAMOUNT
ON dbo.LOANREQUESTS AFTER INSERT, UPDATE
AS BEGIN
    IF EXISTS (SELECT * FROM Inserted) AND NOT EXISTS (SELECT * FROM deleted)
     DECLARE @LOANDURATION int = 0;
	 DECLARE @LOANID int = 0;
	 DECLARE @INTERESTRATE MONEY = 0;
	 DECLARE @AMOUNTTOREPAY MONEY = 0;
	DECLARE @LOANAMOUNT MONEY = 0;
	DECLARE @CUSTOMERID INT = 0;
	DECLARE @STATUS VARCHAR(10);
	SET @STATUS = (SELECT STATUS FROM INSERTED)
	PRINT @STATUS;
	IF(@STATUS='REQUESTED')
	BEGIN
	SET @LOANID =(SELECT  LOANID from INSERTED)
	SET @LOANDURATION =(SELECT  LOANDURATION from INSERTED)
	SET @INTERESTRATE = (SELECT  INTERESTRATE from INSERTED)
	SET @LOANAMOUNT =(SELECT LOANAMOUNT from INSERTED)
	SET @CUSTOMERID = (SELECT CUSTOMERID FROM INSERTED)
	SET @AMOUNTTOREPAY = (@LOANAMOUNT + (@LOANAMOUNT * @INTERESTRATE * (@LOANDURATION/12))/100)
	UPDATE LOANREQUESTS SET AMOUNTTOREPAY = @AMOUNTTOREPAY WHERE LOANID = @LOANID ;
	END
END;
GO


-- TRIGGER FOR LOAN REPAYMENT
GO
CREATE TRIGGER dbo.LOANREPAYMENTTRIGGER
ON dbo.TRANSACTIONS AFTER INSERT, UPDATE
AS BEGIN
    IF EXISTS (SELECT * FROM Inserted) AND NOT EXISTS (SELECT * FROM deleted)
     DECLARE @ACCOUNTID int = 0;
	 DECLARE @TRANSFERSTATUS VARCHAR(20)
	 DECLARE @CUSTOMERID int = 0;
	DECLARE @AMOUNTTRANSFERRED MONEY = 0;
	DECLARE @AMOUNTTOREPAY MONEY = 0;
	DECLARE @BALANCE MONEY =0;
	SET @TRANSFERSTATUS = (SELECT MESSAGE from inserted)
	SET @ACCOUNTID = (SELECT ACCOUNTID from inserted)
	SET @BALANCE =(SELECT  BALANCE from ACCOUNT WHERE ACCOUNTID=@ACCOUNTID)
	SET @CUSTOMERID =(SELECT  CUSTOMERID from ACCOUNT WHERE ACCOUNTID=@ACCOUNTID)
	SET @AMOUNTTRANSFERRED =(SELECT AMOUNTTRANSFERED from inserted)
	SET @AMOUNTTOREPAY = (SELECT AMOUNTTOREPAY FROM LOANREQUESTS WHERE CUSTOMERID=@CUSTOMERID AND STATUS='APPROVED')
	print @AMOUNTTOREPAY;
	print @AMOUNTTRANSFERRED;
	DECLARE @CHECKAMOUNTISZERO MONEY=0;
	SET @CHECKAMOUNTISZERO = @AMOUNTTOREPAY-@AMOUNTTRANSFERRED;
	IF(@TRANSFERSTATUS='LOAN REPAYMENT')
	BEGIN
	IF(@CHECKAMOUNTISZERO=0)
	BEGIN
		 UPDATE LOANREQUESTS SET AMOUNTTOREPAY  = 0,STATUS='COMPLETED'
		  WHERE CUSTOMERID=@CUSTOMERID AND STATUS='APPROVED';
		 UPDATE ACCOUNT SET BALANCE  = (@BALANCE-@AMOUNTTRANSFERRED) WHERE CUSTOMERID=@CUSTOMERID;
	END
	IF(@AMOUNTTOREPAY>@AMOUNTTRANSFERRED)
		DECLARE @AMOUNT MONEY;
		SET @AMOUNT = @AMOUNTTOREPAY-@AMOUNTTRANSFERRED;
		BEGIN
			 UPDATE LOANREQUESTS SET AMOUNTTOREPAY  = @AMOUNT WHERE CUSTOMERID=@CUSTOMERID
			 AND STATUS='APPROVED';
			 UPDATE ACCOUNT SET BALANCE  = (@BALANCE-@AMOUNTTRANSFERRED) WHERE CUSTOMERID=@CUSTOMERID;
		END
	END
END; 
GO




-- TRIGGER TO UPDATE CURRENT COMMODITY PRICE IN PORTFOLIO
GO
CREATE TRIGGER dbo.UPDATECURRENTCOMMODITYPRICEINPORTFOLIO
ON dbo.COMMODITY AFTER INSERT, UPDATE
AS BEGIN
    IF EXISTS (SELECT * FROM Inserted) AND EXISTS (SELECT * FROM deleted)
     DECLARE @ID int = 0;
	DECLARE @COMMODITYPRICE MONEY = 0;
	SET @ID = (SELECT ID FROM INSERTED)
	SET @COMMODITYPRICE = (SELECT COMMODITYPRICE FROM INSERTED)
	UPDATE CUSTOMERPORTFOLIO SET CURRENTPRICE = @COMMODITYPRICE WHERE ID = @ID ;
END;
GO


-- TRIGGER TO UPDATE CURRENT BONDS PRICE IN PORTFOLIO
GO
CREATE TRIGGER dbo.UPDATECURRENTBONDPRICEINPORTFOLIO
ON dbo.BONDS AFTER INSERT, UPDATE
AS BEGIN
    IF EXISTS (SELECT * FROM Inserted) AND EXISTS (SELECT * FROM deleted)
     DECLARE @ID int = 0;
	DECLARE @BONDPRICE MONEY = 0;
	SET @ID = (SELECT ID FROM INSERTED)
	SET @BONDPRICE = (SELECT BONDPRICE FROM INSERTED)
	UPDATE CUSTOMERPORTFOLIO SET CURRENTPRICE = @BONDPRICE WHERE ID = @ID ;
END;
GO

-- TRIGGER TO UPDATE CURRENT STOCK PRICE IN PORTFOLIO
GO
CREATE TRIGGER dbo.UPDATECURRENTPRICEINPORTFOLIO
ON dbo.STOCKS AFTER INSERT, UPDATE
AS BEGIN
    IF EXISTS (SELECT * FROM Inserted) AND EXISTS (SELECT * FROM deleted)
     DECLARE @ID int = 0;
	DECLARE @STOCKPRICE MONEY = 0;
	SET @ID = (SELECT ID FROM INSERTED)
	SET @STOCKPRICE = (SELECT STOCKPRICE FROM INSERTED)
	UPDATE CUSTOMERPORTFOLIO SET CURRENTPRICE = @STOCKPRICE WHERE ID = @ID ;
END;
GO

--- Trigger to disburse loan amount upon approval
GO
CREATE TRIGGER dbo.disburseLoanAmount
ON dbo.LOANREQUESTS 
AFTER INSERT,UPDATE AS 
BEGIN
	DECLARE @LoanStatus VARCHAR(10);
	DECLARE @LoanAmount MONEY;
	DECLARE @CustomerId INT;
	DECLARE @CurrentBalance MONEY;
	DECLARE @FinalBalance MONEY;
	SET @CustomerId = (SELECT CUSTOMERID FROM Inserted);
	SET @LoanStatus = (SELECT STATUS FROM Inserted);
	SET @LoanAmount = (SELECT LOANAMOUNT FROM Inserted);
	SET @CurrentBalance = (SELECT BALANCE FROM ACCOUNT WHERE CUSTOMERID = @CustomerId);
	SET @FinalBalance = @LoanAmount + @CurrentBalance;
	PRINT @LoanStatus;
	IF(@LoanStatus = 'APPROVED')
	BEGIN
		UPDATE ACCOUNT SET BALANCE = @FinalBalance WHERE CUSTOMERID = @CustomerId;
	END
	ELSE
	BEGIN
		PRINT 'REQUEST HAS BEEN DECLINED. NO LOAN FOR YOU'
	END
END
GO

--DROP TRIGGER dbo.disburseLoanAmount;

-- trigger to handle cashier requests
GO
CREATE TRIGGER dbo.handleCashierUpdate
ON dbo.CASHIERREQUESTS
AFTER UPDATE AS 
BEGIN
	DECLARE @DepositAmount MONEY;
	DECLARE @CustomerId INT;
	DECLARE @CurrentBalance MONEY;
	DECLARE @FinalBalance MONEY;
	DECLARE @Status VARCHAR(10);
	DECLARE @PreviousStatus VARCHAR(10);
	SET @Status = (SELECT STATUS FROM INSERTED);
	SET @PreviousStatus = (SELECT STATUS FROM DELETED);
	IF(@Status = 'APPROVED' AND @PreviousStatus = 'REQUESTED')
	BEGIN
		SET @DepositAmount = (SELECT AMOUNTTODEPOSIT FROM INSERTED);
		SET @CustomerId = (SELECT CUSTOMERID FROM INSERTED);
		SET @CurrentBalance = (SELECT BALANCE FROM ACCOUNT WHERE CUSTOMERID = @CustomerId);
		SET @FinalBalance = @DepositAmount + @CurrentBalance;
		UPDATE ACCOUNT SET BALANCE = @FinalBalance WHERE CUSTOMERID = @CustomerId;
	END
	ELSE
	BEGIN
		PRINT 'REQUEST DECLINED.'
		IF(@PreviousStatus = 'APPROVED')
		BEGIN
			PRINT 'REQUEST WITH SAME ID HAS ALREADY BEEN APPROVED'
		END
		
		IF(@PreviousStatus = 'DECLINED')
		BEGIN
			PRINT 'ATTEMPTING TO APPROVE A PREVIOUSLY DECLINED REQUEST'
		END
	END
END
GO



-- trigger to validate input parameters in customer table
GO
CREATE TRIGGER dbo.validateInputChecks
ON dbo.CUSTOMER 
AFTER
INSERT, UPDATE AS 
BEGIN
	DECLARE @EmailId VARCHAR(20);
	DECLARE @Phone VARCHAR(20);
	DECLARE @Ssn VARCHAR(20);
	IF EXISTS (SELECT * FROM Inserted) AND EXISTS (SELECT * FROM Deleted)
		BEGIN
			SET @EmailId = (SELECT EMAILID FROM Inserted);
			SET @Phone = (SELECT PHONENUMBER FROM Inserted);
			SET @Ssn = (SELECT SSN FROM Inserted);
		END;
	IF EXISTS (SELECT * FROM Inserted) AND NOT EXISTS (SELECT * FROM deleted)
		BEGIN
			SET @EmailId = (SELECT EMAILID FROM Inserted);
			SET @Phone = (SELECT PHONENUMBER FROM Inserted);
			SET @Ssn = (SELECT SSN FROM Inserted);
		END;

	IF(CAST(LEN(@Phone) AS INT) <> 10)
		BEGIN
			ROLLBACK;
		END
	IF(CAST(LEN(@Ssn) AS INT) != 9)
		BEGIN
			ROLLBACK;
		END
	
	IF(@EmailId NOT LIKE '_%@__%.__%')
		BEGIN
			ROLLBACK;
		END
END
GO


ALTER TABLE dbo.Credentials ADD PASSWORD_ENCRYPT varbinary(MAX);
--Trigger for password ENCRYPTION
GO
CREATE TRIGGER dbo.ENCRYPTPASSWORD
ON dbo.Credentials AFTER INSERT, UPDATE
AS BEGIN
OPEN SYMMETRIC KEY Team10_SymmetricKey
DECRYPTION BY CERTIFICATE Team10_Certificate

    IF EXISTS (SELECT * FROM Inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
    DECLARE @data VARCHAR(30);
    select @data=Password from CREDENTIALS where customerid=(SELECT customerid FROM INSERTED);
    Update  Credentials set PASSWORD_ENCRYPT= EncryptByKey (Key_GUID(N'Team10_SymmetricKey'), @data)
                where CUSTOMERID=(SELECT customerid FROM INSERTED);

    CLOSE SYMMETRIC KEY Team10_SymmetricKey;            
    END
END;
GO


--STORED PROCEDURE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



/*
 * ADMIN APPROVES FOREX REQUEST
 * CHECK IF THE STATUS IS IN REQUESTED IF NOY THROW AN ERROR
 * CALCULATE THE CONVERSION RATE AND THE AMOUNT OF DOLLARS REQUIRED TO GET THE REQUIRED AMOUNT IN THE GIVEN CURRENCY
 * CHECK IF THE USER HAS THIS AMOUNT IN HIS ACCOUNT 
 * IF YES
 * 	SUBTRACT THE AMOUNT FROM HIS ACCOUNT 
 * IF NO 
 * 	DISPLAY THAT THERE IS INSUFFICIENT FUNDS AND REJECT THE REQUEST
 */
GO
CREATE PROCEDURE APPROVEFOREXREQUEST(@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@REQUESTID INT)
AS 
BEGIN 
	DECLARE @CUSTOMERCOUNT INT;
	DECLARE @CURRENTSTATUS VARCHAR(20);
	DECLARE @INITIALAMOUNT MONEY;
	DECLARE @FOREXID INT;
	DECLARE @CONVERSIONRATE FLOAT;
	DECLARE @REQUIREDAMOUNT MONEY;
	DECLARE @CURRENTBALANCE MONEY;
	DECLARE @CUSTOMERID INT;
	DECLARE @NEWBALANCE MONEY;
	DECLARE @ACCOUNTID INT;
	SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
	IF (@CUSTOMERCOUNT>0)
	BEGIN
		SELECT @CUSTOMERID = CUSTOMERID, @CURRENTSTATUS = STATUS, @INITIALAMOUNT = INITIALAMOUNT, @FOREXID = FOREXID FROM DBO.FOREXCARDREQUESTS WHERE REQUESTID = @REQUESTID;
		IF(@CURRENTSTATUS != 'REQUESTED')
		BEGIN
			PRINT 'REQUEST IS NOT VALID';
			RETURN;
		END
		SELECT @CONVERSIONRATE = EXCHANGERATE FROM DBO.FOREXCURRENCIES WHERE FOREXID = @FOREXID;
		SET @REQUIREDAMOUNT = (@INITIALAMOUNT / @CONVERSIONRATE);
		
		SELECT @ACCOUNTID = ACCOUNTID, @CURRENTBALANCE = BALANCE FROM DBO.ACCOUNT WHERE CUSTOMERID = @CUSTOMERID;
		IF(@CURRENTBALANCE < @REQUIREDAMOUNT)
		BEGIN
			PRINT 'INSUFICIENT FUNDS!';
			RETURN;
		END
		
		SET @NEWBALANCE = (@CURRENTBALANCE - @REQUIREDAMOUNT);

		UPDATE DBO.ACCOUNT SET BALANCE = @NEWBALANCE WHERE ACCOUNTID = @ACCOUNTID;
		UPDATE DBO.FOREXCARDREQUESTS SET STATUS = 'APPROVED' WHERE REQUESTID = @REQUESTID
	END
	ELSE
	BEGIN
		 PRINT 'CREDENTIAL ERROR';
	END
END
GO



/*
 * Function to buy and sell stocks
 * Both take username, password customerid and orderqty, INVESTMENTID
 * before buying calculate the amount of money required to buy the given qty by checking the corresponding investment table and calculate qty * price, 
 * check if the customer has the required amount in his account, if not cancel the transaction, if yes then reduce the amount in the account and 
 * put it in the portfolio table, also update the previous order history table
 * Before selling calculate that the customer invoking this procedure has the required amount of stocks he's trying to sell
 * if no throw an error and cancel the transaction, if yes then check if the quatity is 0, if it is zero remove the row and insert the data into the previous order history table
 * if not zero just update the row and insert into the previous order history table 
 */

GO
CREATE PROCEDURE TRADE(@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@CUSTOMERID INT, @ORDERQTY INT, @INVESTMENTID INT, @TRADETYPE VARCHAR(10))
AS 
BEGIN 
	DECLARE @CUSTOMERCOUNT INT;
	SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and PASSWORD=@PASSWORD AND CUSTOMERTYPE='CUSTOMER';
	IF(@CUSTOMERCOUNT > 0)
	BEGIN
		DECLARE @PERUNITCOST MONEY;
		DECLARE @TOTALORDERCOST MONEY;
		DECLARE @AVAILABLEFUNDS MONEY;
		DECLARE @INVESTMENTNAME VARCHAR(50);
		
		SELECT @AVAILABLEFUNDS = BALANCE FROM ACCOUNT WHERE CUSTOMERID = @CUSTOMERID;
		IF(@INVESTMENTID <= 1000)
		BEGIN
			SELECT @PERUNITCOST = BONDPRICE, @INVESTMENTNAME = BONDNAME FROM BONDS WHERE ID = @INVESTMENTID;
		END
		ELSE IF(@INVESTMENTID > 1000 AND @INVESTMENTID <= 2000)
		BEGIN 
			SELECT @PERUNITCOST = COMMODITYPRICE, @INVESTMENTNAME = COMMODITYNAME FROM COMMODITY WHERE ID = @INVESTMENTID;
		END
		ELSE 
		BEGIN 
			SELECT @PERUNITCOST = STOCKPRICE, @INVESTMENTNAME = STOCKNAME FROM STOCKS WHERE ID = @INVESTMENTID;
		END	
		IF(@TRADETYPE = 'BUY')
		BEGIN
			SET @TOTALORDERCOST = @ORDERQTY * @PERUNITCOST;
			IF(@AVAILABLEFUNDS >= @TOTALORDERCOST)
			BEGIN
				DECLARE @ACCOUNTID INT;
				DECLARE @NEWBALANCE MONEY;
				DECLARE @COUNTPREVINVESTMENT INT;
				SET @NEWBALANCE = @AVAILABLEFUNDS - @TOTALORDERCOST;
			
				SELECT @ACCOUNTID = ACCOUNTID FROM ACCOUNT WHERE CUSTOMERID = @CUSTOMERID;
			
				UPDATE ACCOUNT SET BALANCE = @NEWBALANCE WHERE ACCOUNTID = @ACCOUNTID;
				
				SELECT @COUNTPREVINVESTMENT = COUNT(*) FROM CUSTOMERPORTFOLIO WHERE CUSTOMERID = @CUSTOMERID AND ID = @INVESTMENTID;
				IF(@COUNTPREVINVESTMENT > 0)
				BEGIN
					DECLARE @OLDQTY INT;
					DECLARE @OLDPRICE MONEY;
					DECLARE @NEWAVGPRICE MONEY;
					DECLARE @TOTALQTY INT;
					DECLARE @NEWPROFIT FLOAT;
					
					SELECT @OLDQTY = AVGQUANTITY, @OLDPRICE = AVGBUYSELLPRICE FROM CUSTOMERPORTFOLIO WHERE CUSTOMERID = @CUSTOMERID AND ID = @INVESTMENTID;
					-- (CUR QTY * CUR PRICE + NEW QTY * NEW PRICE)/(TOTAL QTY)
					SET @TOTALQTY = @OLDQTY + @ORDERQTY;
					SET @NEWAVGPRICE = ((@OLDQTY * @OLDPRICE) + (@TOTALORDERCOST))/@TOTALQTY;
					UPDATE CUSTOMERPORTFOLIO SET AVGBUYSELLPRICE = @NEWAVGPRICE, AVGQUANTITY = @TOTALQTY 
					WHERE CUSTOMERID = @CUSTOMERID AND ID = @INVESTMENTID;
				END
				ELSE
				BEGIN
					INSERT INTO CUSTOMERPORTFOLIO VALUES(@CUSTOMERID,@INVESTMENTID,@INVESTMENTNAME,@PERUNITCOST,@ORDERQTY, @PERUNITCOST,0);
				END
				
				INSERT INTO PREVIOUSORDERHISTORY VALUES(@CUSTOMERID,@INVESTMENTID,@INVESTMENTNAME,@PERUNITCOST,@ORDERQTY,GETDATE(),'BUY');
		
			END
			ELSE
			BEGIN
				PRINT 'INSSUFICIENT FUNDS FOR THIS OPERATION'
				RETURN;
			END
		END
		ELSE IF(@TRADETYPE = 'SELL')
		BEGIN
			DECLARE @CURAVALIABLE INT;
			DECLARE @CURPRICE MONEY;
			DECLARE @AVGBSPRICE MONEY;
			DECLARE @RELALISEDPROFIT MONEY;
			SELECT @CURAVALIABLE = AVGQUANTITY, @CURPRICE = CURRENTPRICE, @AVGBSPRICE = AVGBUYSELLPRICE FROM CUSTOMERPORTFOLIO WHERE CUSTOMERID = @CUSTOMERID AND ID = @INVESTMENTID;
			DECLARE @SALEVALUE MONEY;
			DECLARE @NEWBALANCE2 MONEY;
			DECLARE @ACCOUNTID2 INT;
		
			SET @SALEVALUE = @CURPRICE * @ORDERQTY;
			SET @RELALISEDPROFIT = @SALEVALUE - (@AVGBSPRICE * @ORDERQTY);
			SET @NEWBALANCE2 = @AVAILABLEFUNDS + @SALEVALUE;
		
			SELECT @ACCOUNTID2 = ACCOUNTID FROM ACCOUNT WHERE CUSTOMERID = @CUSTOMERID;
			
		
			IF(@CURAVALIABLE > @ORDERQTY)
			BEGIN
				DECLARE @NEWAVAILABLEQTY INT;
				SET @NEWAVAILABLEQTY = @CURAVALIABLE - @ORDERQTY;
				UPDATE CUSTOMERPORTFOLIO SET AVGQUANTITY = @NEWAVAILABLEQTY, PROFITLOSS = @RELALISEDPROFIT
					WHERE CUSTOMERID = @CUSTOMERID AND ID = @INVESTMENTID;
				
			END
			ELSE IF(@CURAVALIABLE = @ORDERQTY)
			BEGIN
				DELETE FROM CUSTOMERPORTFOLIO WHERE CUSTOMERID = @CUSTOMERID AND ID = @INVESTMENTID;
			END
			ELSE
			BEGIN
				PRINT 'NOT ENOUGH QUANTITY AVAILABLE FOR THIS SELL OPERATION'
				RETURN;
			END
			
			UPDATE ACCOUNT SET BALANCE = @NEWBALANCE2 WHERE ACCOUNTID = @ACCOUNTID2;
			INSERT INTO PREVIOUSORDERHISTORY VALUES(@CUSTOMERID,@INVESTMENTID,@INVESTMENTNAME,@PERUNITCOST,@ORDERQTY,GETDATE(),'SELL');
		END
		ELSE
		BEGIN
			PRINT 'UNKOWN OPERATION'
			RETURN;
		END
		
		
	END
	ELSE
	BEGIN
		PRINT 'CREDENTIAL ERROR';
		RETURN;
	END
	
END
GO



--TO INSERT CUSTOMERS
GO
CREATE PROCEDURE [dbo].[INSERTCUSTOMER] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),
       @CUSTOMERID INT,@FIRSTNAME VARCHAR(100), @LASTNAME VARCHAR(100),@DOB  DATE,   
	   @SSN  VARCHAR(9),@PHONENUMBER  VARCHAR(10),@CREDITSCORE INT,@EMAILID VARCHAR(35),
	   @IDENTIFICATIONDOCUMENT VARCHAR(35),@IDENTIFICATIONID VARCHAR(35) )
AS 
BEGIN 
DECLARE @ADMIN VARCHAR(30) 
SELECT @ADMIN = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
IF	@ADMIN>0
BEGIN
     INSERT INTO dbo.CUSTOMER( CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,CREDITSCORE,EMAILID,
	 IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) 
     VALUES (@CUSTOMERID,@FIRSTNAME , @LASTNAME ,@DOB ,   
	   @SSN ,@PHONENUMBER  ,@CREDITSCORE ,@EMAILID ,
	   @IDENTIFICATIONDOCUMENT ,@IDENTIFICATIONID ) 
END
ELSE
BEGIN
	PRINT 'WRONG DATA ENTERED';
END
END 

GO


	   
	   
--To insert into credential table

GO
CREATE PROCEDURE [dbo].[INSERTCREDENTIAL] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@CREDENTIALID INT,
       @CUSTOMERID INT,@USER_USERNAME VARCHAR(100), @USER_PASSWORD VARCHAR(100) )
AS 
BEGIN 
DECLARE @ADMIN VARCHAR(30) 
SELECT @ADMIN = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
IF	@ADMIN>0
BEGIN
     INSERT INTO dbo.CREDENTIALS( CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) 
     VALUES (@CREDENTIALID,@CUSTOMERID,@USER_USERNAME , @USER_PASSWORD ,'CUSTOMER' ) 
END
ELSE
BEGIN
	PRINT 'WRONG DATA ENTERED';
END
END 

GO



--CASH DEPOSIT REQUEST
GO
CREATE PROCEDURE [dbo].[CASHIERREQUEST] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),
       @CUSTOMERID INT,@AMOUNTTODEPOSIT VARCHAR(100))
AS 
BEGIN 
DECLARE @CUSTOMER VARCHAR(30) 
SELECT @CUSTOMER = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='CUSTOMER' AND CUSTOMERID=@CUSTOMERID;
DECLARE @DEPOSITREQUESTID INT
SELECT @DEPOSITREQUESTID = COUNT(*) FROM dbo.CASHIERREQUESTS
IF	@CUSTOMER>0
BEGIN
     INSERT INTO dbo.CASHIERREQUESTS
     VALUES (@DEPOSITREQUESTID+1,@CUSTOMERID,@AMOUNTTODEPOSIT , GETDATE() ,'REQUESTED','DEPOSIT' ) 
END
ELSE
BEGIN
	PRINT 'WRONG DATA ENTERED';
END
END 
GO



--changing status requset for cash request 
GO 
CREATE PROCEDURE CASHERREQUESTDECISION(@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100), 
@DEPOSITREQUESTID INT,@STATUS VARCHAR(100))  
AS 
BEGIN 
DECLARE @CUSTOMERCOUNT INT 
SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
IF @CUSTOMERCOUNT>0
BEGIN
	UPDATE CASHIERREQUESTS SET STATUS = @STATUS WHERE DEPOSITREQUESTID=@DEPOSITREQUESTID;
END
ELSE
PRINT 'WRONG DATA'
END
GO
--DROP PROCEDURE CASHERREQUESTDECISION


-- create loan request for customers
GO
CREATE PROCEDURE [dbo].[LOANREQUESTPROCEDURE] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),
       @LOANDURATION INT,@CUSTOMERID INT,@INTERESTRATE FLOAT,
	   @LOANAMOUNT MONEY)
AS 
BEGIN 
DECLARE @CUSTOMER VARCHAR(30) 
SELECT @CUSTOMER = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='CUSTOMER' AND CUSTOMERID=@CUSTOMERID;
DECLARE @LOANREQUESTID INT
SELECT @LOANREQUESTID = COUNT(*) FROM dbo.LOANREQUESTS
IF	@CUSTOMER>0
BEGIN
     INSERT INTO dbo.LOANREQUESTS(LOANID,LOANDURATION,CUSTOMERID,INTERESTRATE,LOANAMOUNT,STATUS)
     VALUES (@LOANREQUESTID+1,@LOANDURATION,@CUSTOMERID ,@INTERESTRATE,
	  @LOANAMOUNT ,'REQUESTED' ) 
END
ELSE
BEGIN
	PRINT 'WRONG DATA ENTERED';
END
END 
GO

--CHANGING LOAN REQUEST DECISIONS
GO
CREATE PROCEDURE LOANREQUESTDECISION(@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100), 
@LOANREQUESTID INT,@STATUS VARCHAR(100))  
AS 
BEGIN 
DECLARE @ADMINCOUNT INT 
SELECT @ADMINCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
IF @ADMINCOUNT>0
BEGIN
	UPDATE LOANREQUESTS SET STATUS = @STATUS WHERE LOANID=@LOANREQUESTID;
END
ELSE
PRINT 'WRONG DATA'
END
GO



--INSER AND UPDATE FOREX CURRENCIES
GO
CREATE PROCEDURE [dbo].[ADDFOREXCURRENCIES] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),
       @CURRENCYNAME VARCHAR(100),@EXCHANGERATE MONEY)
AS 
BEGIN 
DECLARE @CUSTOMERCOUNT INT 
SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
DECLARE @CURRENCYCOUNT INT 
SELECT @CURRENCYCOUNT = COUNT(*) FROM dbo.FOREXCURRENCIES WHERE CURRENCYNAME=@CURRENCYNAME
IF (@CUSTOMERCOUNT>0)
BEGIN
	IF( @CURRENCYCOUNT=0)
	BEGIN
		DECLARE @FOREXID INT 
		SELECT @FOREXID = COUNT(*) FROM dbo.FOREXCURRENCIES;
     INSERT INTO dbo.FOREXCURRENCIES VALUES (@FOREXID+1,@CURRENCYNAME,@EXCHANGERATE ) 
	END
	ELSE
	BEGIN
		UPDATE FOREXCURRENCIES SET EXCHANGERATE = @EXCHANGERATE WHERE CURRENCYNAME=@CURRENCYNAME;
	END
END
ELSE 
	BEGIN
		PRINT 'CREDENTIAL ERROR';
	END
END
GO



--LOAN REPAYMENT- INSERT INTO TRANSACTION TABLE
GO
CREATE PROCEDURE [dbo].[LOANREPAYMENT] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@CUSTOMERID INT,@AMOUNTTOTRANSFER MONEY)
AS 
BEGIN
DECLARE @CUSTOMERCOUNT INT 
SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='CUSTOMER';
IF(@CUSTOMERCOUNT>0)
BEGIN
	DECLARE @LOANCOUNT INT
	SELECT @LOANCOUNT = COUNT(*) FROM dbo.LOANREQUESTS WHERE  CUSTOMERID=@CUSTOMERID AND STATUS='APPROVED';
	IF((@LOANCOUNT)>0)
	BEGIN
		DECLARE @AMOUNTTOREPAY MONEY
		SELECT @AMOUNTTOREPAY =  AMOUNTTOREPAY FROM LOANREQUESTS WHERE CUSTOMERID=@CUSTOMERID AND STATUS='APPROVED';
		DECLARE @ACCOUNTBALANCE MONEY
		SELECT @ACCOUNTBALANCE =  BALANCE FROM ACCOUNT WHERE CUSTOMERID=@CUSTOMERID ;
		IF(@ACCOUNTBALANCE<@AMOUNTTOREPAY)
			BEGIN
				PRINT 'INSUFFIECIENT FUNDS';
			END
			ELSE IF(@ACCOUNTBALANCE>@AMOUNTTOREPAY AND @AMOUNTTOTRANSFER<=@AMOUNTTOREPAY  )
			BEGIN
			DECLARE @TRANSACTIONID INT
			DECLARE @ACCOUNTID INT
			SELECT @ACCOUNTID =  ACCOUNTID FROM dbo.ACCOUNT WHERE CUSTOMERID=@CUSTOMERID;
			SELECT @TRANSACTIONID =  COUNT(*) FROM dbo.TRANSACTIONS
				INSERT INTO TRANSACTIONS VALUES (@ACCOUNTID,200000,@AMOUNTTOTRANSFER,GETDATE(),'LOAN REPAYMENT','OUTWARD')
			END
			ELSE IF(@AMOUNTTOTRANSFER>@AMOUNTTOREPAY)
			BEGIN
				PRINT 'CANNOT REPAY MORE THAN OUTSTANDING LOAN AMOUNT';
			END
		END
	ELSE
	BEGIN 
		PRINT 'YOU DO NOT HAVE A LOAN TO REPAY';
	END
END
ELSE
BEGIN
 PRINT 'WRONG CREDENTIALS';
END
END
GO


--STORED PROCEDURE FROM INSERTING AND UPDATING STOCKS
GO
CREATE PROCEDURE [dbo].[ADDSTOCKS] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@STOCKNAME VARCHAR(100),
       @STOCKPRICE MONEY,@TICKERSYMBOL VARCHAR(100))
AS 
BEGIN 
DECLARE @ADMINCOUNT INT 
SELECT @ADMINCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
DECLARE @STOCKCOUNT INT 
SELECT @STOCKCOUNT = COUNT(*) FROM dbo.STOCKS WHERE STOCKNAME=@STOCKNAME
IF (@ADMINCOUNT>0)
BEGIN
	IF( @STOCKCOUNT=0)
	BEGIN
		DECLARE @STOCKID INT 
		SELECT @STOCKID = COUNT(*) FROM dbo.STOCKS;
     INSERT INTO dbo.STOCKS VALUES (@STOCKID+2001,@STOCKNAME,@STOCKPRICE,@TICKERSYMBOL ) 
	END
	ELSE
	BEGIN
		UPDATE STOCKS SET STOCKPRICE = @STOCKPRICE WHERE STOCKNAME=@STOCKNAME;
	END
END
ELSE 
	BEGIN
		PRINT 'CREDENTIAL ERROR';
	END
END
GO

--STORED PROCEDURE TO INSERT AND UPDATE BONDS
GO
CREATE PROCEDURE [dbo].[ADDBONDS] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@BONDNAME VARCHAR(100),
       @BONDPRICE MONEY,@MATURITYDATE DATE,@BONDYIELD FLOAT)
AS 
BEGIN 
DECLARE @ADMINCOUNT INT 
SELECT @ADMINCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
DECLARE @BONDCOUNT INT 
SELECT @BONDCOUNT = COUNT(*) FROM dbo.BONDS WHERE BONDNAME=@BONDNAME
IF (@ADMINCOUNT>0)
BEGIN
	IF( @BONDCOUNT=0)
	BEGIN
		DECLARE @BONDID INT 
		SELECT @BONDID = COUNT(*) FROM dbo.BONDS;
     INSERT INTO dbo.BONDS VALUES (@BONDID+1,@BONDNAME,@BONDPRICE,@MATURITYDATE,@BONDYIELD ) 
	END
	ELSE
	BEGIN
		UPDATE BONDS SET BONDPRICE = @BONDPRICE,BONDYIELD=@BONDYIELD WHERE BONDNAME=@BONDNAME;
	END
END
ELSE 
	BEGIN
		PRINT 'CREDENTIAL ERROR';
	END
END
GO


--STORED PROCEDURE TO INSERT AND UPDATE COMMODITY
GO
CREATE PROCEDURE [dbo].[ADDCOMMODITY] (
		@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@COMMODITYNAME VARCHAR(100),
       @COMMODITYPRICE MONEY)
AS 
BEGIN 
DECLARE @ADMINCOUNT INT 
SELECT @ADMINCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='ADMIN';
DECLARE @COMMODITYCOUNT INT 
SELECT @COMMODITYCOUNT = COUNT(*) FROM dbo.COMMODITY WHERE COMMODITYNAME=@COMMODITYNAME
IF (@ADMINCOUNT>0)
BEGIN
	IF( @COMMODITYCOUNT=0)
	BEGIN
		DECLARE @COMMODITYID INT 
		SELECT @COMMODITYID = COUNT(*) FROM dbo.COMMODITY;
     INSERT INTO dbo.COMMODITY VALUES (@COMMODITYID+1001,@COMMODITYNAME,@COMMODITYPRICE ) 
	END
	ELSE
	BEGIN
		UPDATE COMMODITY SET COMMODITYPRICE = @COMMODITYPRICE WHERE COMMODITYNAME=@COMMODITYNAME;
	END
END
ELSE 
	BEGIN
		PRINT 'CREDENTIAL ERROR';
	END
END
GO


	   --TO ADD BENEFICIARY
	   GO
CREATE PROCEDURE [dbo].[INSERTBENIFICIARY] (@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),
       @CUSTOMERID INT,@BENIFICIARYACCOUNTID INT,@NICKNAME VARCHAR(20) )
AS 
BEGIN 
DECLARE @CUSTOMERCOUNT INT 
SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='CUSTOMER';
IF	@CUSTOMERCOUNT>0
	BEGIN
	 DECLARE @ACCOUNTCOUNT INT 
	 SELECT @ACCOUNTCOUNT = COUNT(*) FROM dbo.ACCOUNT WHERE ACCOUNTID=@BENIFICIARYACCOUNTID
	 IF (@ACCOUNTCOUNT=1)
	 BEGIN
	 DECLARE @BENIID INT 
	 SELECT @BENIID = COUNT(*) FROM dbo.CUSTOMERBENIFICIERIES
     INSERT INTO dbo.CUSTOMERBENIFICIERIES VALUES (@BENIID+1,@CUSTOMERID , @NICKNAME ,@BENIFICIARYACCOUNTID );
	 END
  ELSE
	   BEGIN
	   PRINT 'ACCOUNT DOES NOT EXIST';
	   END
END
ELSE
BEGIN
	PRINT 'WRONG CREDENTIALS ENTERED';
END
END 
GO


--TO TRANSFER MONEY
GO
CREATE PROCEDURE [dbo].[TRANSFERMONEY] (@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),
       @CUSTOMERID INT, @TOACCOUNTID INT,@AMOUNTTOTRANSFER MONEY)
AS 
BEGIN 
DECLARE @CUSTOMERCOUNT INT 
SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and 
PASSWORD=@PASSWORD AND CUSTOMERTYPE='CUSTOMER';
IF	@CUSTOMERCOUNT>0
	BEGIN
	 DECLARE @ACCOUNTCOUNT INT 
	 DECLARE @CUSTBALANCE MONEY 
	 SELECT @CUSTBALANCE = BALANCE FROM dbo.ACCOUNT WHERE CUSTOMERID=@CUSTOMERID
	 SELECT @ACCOUNTCOUNT = COUNT(*) FROM dbo.CUSTOMERBENIFICIERIES WHERE CUSTOMERID=@CUSTOMERID
	 IF (@ACCOUNTCOUNT>0 AND @CUSTBALANCE>@AMOUNTTOTRANSFER)
	 BEGIN
	 DECLARE @BENIBALANCE MONEY
	  SELECT @BENIBALANCE = BALANCE FROM dbo.ACCOUNT WHERE ACCOUNTID=@TOACCOUNTID
	  UPDATE ACCOUNT SET BALANCE = (@BENIBALANCE+@AMOUNTTOTRANSFER) WHERE ACCOUNTID=@TOACCOUNTID;
	  UPDATE ACCOUNT SET BALANCE = (@CUSTBALANCE-@AMOUNTTOTRANSFER) WHERE CUSTOMERID=@CUSTOMERID;
	  DECLARE @CUSTACCOUNTID INT
	  SELECT @CUSTACCOUNTID = ACCOUNTID FROM dbo.ACCOUNT WHERE CUSTOMERID = @CUSTOMERID
	 INSERT INTO TRANSACTIONS VALUES (@CUSTACCOUNTID,@TOACCOUNTID,@AMOUNTTOTRANSFER,GETDATE(),'MONEY TRANSFER','OUTWARD')
	 END
  ELSE
	   BEGIN
	   PRINT 'ACCOUNT DOES NOT EXIST OR INSUFFICIENT BALANCE';
	   END
END
ELSE
BEGIN
	PRINT 'WRONG CREDENTIALS ENTERED';
END
END 
GO

--INSERT IMAGES
CREATE PROCEDURE CustomerAssetInsert(@USERNAME VARCHAR(100),@PASSWORD VARCHAR(100),@AID INT,@CUSTOMERID INT ,@ATYPE VARCHAR(20), @AIMAGE Image, @AVALUE MONEY)
AS 
BEGIN 
    DECLARE @CUSTOMERCOUNT INT;
    SELECT @CUSTOMERCOUNT = COUNT(*) FROM dbo.CREDENTIALS WHERE USERNAME=@USERNAME and PASSWORD=@PASSWORD AND CUSTOMERTYPE='CUSTOMER';
    IF(@CUSTOMERCOUNT > 0)
    BEGIN
        insert into CUSTOMERASSETS(ASSETID,CUSTOMERID, ASSETTYPE, ASSETIMAGE, ASSETVALUE) values(@AID, @CUSTOMERID, @ATYPE, @AIMAGE, @AVALUE)
    END
    ELSE
    BEGIN
        PRINT 'CREDENTIAL ERROR';
    END 
END



--computed columns--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GO
CREATE FUNCTION dbo.CALC_AGE(@DateOfBirth AS DATETIME)
RETURNS INT
AS
BEGIN
DECLARE @Years AS INT
DECLARE @BirthdayDate AS DATETIME
DECLARE @Age AS INT

--Calculate difference in years
SET @Years = DATEDIFF(YY,@DateOfBirth,GETDATE())
--Add years to DateOfBirth
SET @BirthdayDate = DATEADD(YY,@Years,@DateOfBirth)
--Subtract a year if birthday is after today
SET @Age = @Years -
CASE
WHEN @BirthdayDate>GETDATE() THEN 1
ELSE 0
END
--Return the result
RETURN @Age
END
GO

ALTER TABLE dbo.Customer ADD CUSTOMER_AGE AS dbo.CALC_AGE(DOB)

--SELECT * FROM CUSTOMER

----==== VIEW - 1 === --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--view customer details for granting loans
GO
CREATE VIEW CustomerDetailsForLoan AS
with temp as(
select CUSTOMER.CUSTOMERID, CONCAT(firstname, ' '+LASTNAME)as FULLNAME, SSN,  CREDITSCORE, PHONENUMBER , ACCOUNTID, BALANCE
from CUSTOMER
INNER JOIN
ACCOUNT
ON CUSTOMER.CUSTOMERID=ACCOUNT.CUSTOMERID)
select temp.CUSTOMERID, FULLNAME, SSN,  CREDITSCORE, PHONENUMBER , ACCOUNTID, BALANCE, ASSETID, ASSETTYPE, ASSETVALUE 
from temp
INNER JOIN
CUSTOMERASSETS
ON temp.CUSTOMERID=CUSTOMERASSETS.CUSTOMERID
GO




--VIEW FOR INVESTMENT ADVISOR ON STOCKS
CREATE VIEW INVESTMENT_ADVISOR_ON_STOCKS AS
with temp as(
select CUSTOMERID, c.ID, c.NAME, c.AVGBUYSELLPRICE, c.AVGQUANTITY, CURRENTPRICE, PROFITLOSS, s.STOCKNAME, s.STOCKPRICE as 'CURRENT_UNIT_STOCKPRICE'
from customerportfolio c
INNER JOIN 
STOCKS s
ON c.ID=s.ID)
select  CONCAT(cm.firstname,' '+cm.lastname) as 'FULL NAME' ,temp.CUSTOMERID, temp.ID, temp.NAME, temp.AVGBUYSELLPRICE, temp.AVGQUANTITY, temp.CURRENTPRICE, temp.PROFITLOSS, temp.STOCKNAME, temp.CURRENT_UNIT_STOCKPRICE
from 
temp INNER JOIN customer as cm
on temp.customerid= cm.customerid
--select * from INVESTMENT_ADVISOR_ON_STOCKS
GO

--VIEW FOR INVESTMENT ADVISOR ON BONDS
CREATE VIEW INVESTMENT_ADVISOR_ON_BONDS AS
with temp as(
select CUSTOMERID, c.ID, c.NAME, c.AVGBUYSELLPRICE, c.AVGQUANTITY, CURRENTPRICE, PROFITLOSS, b.BONDNAME, b.BONDPRICE, b.MATURITYDATE, b.BONDYIELD
from customerportfolio c
INNER JOIN 
BONDS b
ON c.ID=b.ID)
select  CONCAT(cm.firstname,' '+cm.lastname) as 'FULL NAME' ,temp.CUSTOMERID, temp.ID, temp.NAME, temp.AVGBUYSELLPRICE, temp.AVGQUANTITY, temp.CURRENTPRICE, temp.PROFITLOSS, temp.BONDNAME, temp.BONDPRICE as 'CURRENT UNIT BOND PRICE', temp.MATURITYDATE, temp.BONDYIELD
from 
temp INNER JOIN customer as cm
on temp.customerid= cm.customerid
--select * from INVESTMENT_ADVISOR_ON_BONDS
GO


--VIEW FOR INVESTMENT ADVISOR ON COMMODITY
CREATE VIEW INVESTMENT_ADVISOR_ON_COMMODITY AS
with temp as(
select CUSTOMERID, c.ID, c.NAME, c.AVGBUYSELLPRICE, c.AVGQUANTITY, CURRENTPRICE, PROFITLOSS, cm.COMMODITYNAME, cm.COMMODITYPRICE as 'CURRENT COMMODITY UNIT PRICE'
from customerportfolio c
INNER JOIN 
COMMODITY cm
ON c.ID=cm.ID)
select  CONCAT(cm.firstname,' '+cm.lastname) as 'FULL NAME' ,temp.CUSTOMERID, temp.ID, temp.NAME, temp.AVGBUYSELLPRICE, temp.AVGQUANTITY, temp.CURRENTPRICE, temp.PROFITLOSS, temp.COMMODITYNAME, temp.[CURRENT COMMODITY UNIT PRICE]
from 
temp INNER JOIN customer as cm
on temp.customerid= cm.customerid
--select * from INVESTMENT_ADVISOR_ON_COMMODITY
GO



--view top stocks
CREATE VIEW TOP_STOCKS AS
select TOP(5) NAME, SUM(Quantity) as 'TOTAL BOUGHT' 
from PREVIOUSORDERHISTORY 
where STATUS='BUY' and ID between 2000 and 3000
group by NAME
Order by SUM(Quantity) desc
--select * from TOP_STOCKS
GO


--view top commodities
CREATE VIEW TOP_COMMODITY AS
select TOP(5) NAME, SUM(Quantity) as 'TOTAL BOUGHT' 
from PREVIOUSORDERHISTORY 
where STATUS='BUY' and ID between 1000 and 2000
group by NAME
Order by SUM(Quantity) desc
--select * from TOP_COMMODITY
GO


--view top Bonds
CREATE VIEW TOP_BONDS AS
select TOP(5) NAME, SUM(Quantity) as 'TOTAL BOUGHT' 
from PREVIOUSORDERHISTORY 
where STATUS='BUY' and ID between 1 and 1000
group by NAME
Order by SUM(Quantity) desc
--select * from TOP_BONDS
GO

-------INSERT QUERIES ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--COMMODITY TABLE

 INSERT INTO COMMODITY VALUES (1001,'WTI Crude Oil',93.92)
 INSERT INTO COMMODITY VALUES (1002,'Uranium',26.50)
 INSERT INTO COMMODITY VALUES (1003,'Brent Crude Oil',100.00)
 INSERT INTO COMMODITY VALUES (1004,'Natural Gas',8.22)
INSERT INTO COMMODITY VALUES (1005,'Silver',20.33)
INSERT INTO COMMODITY VALUES (1006,'Corn',611.00)
INSERT INTO COMMODITY VALUES (1007,'Wheat',799.50)
INSERT INTO COMMODITY VALUES (1008,'Platinum',903.60)
INSERT INTO COMMODITY VALUES (1009,'Copper',3.54)
INSERT INTO COMMODITY VALUES (1000,'Soybeans',1409.00)


--STOCK TABLE
        INSERT INTO STOCKS VALUES (2001,'APPLE',110.00,'AAPL')
       INSERT INTO STOCKS VALUES (2002,'MICROSOFT',100.00,'MSFT')
       INSERT INTO STOCKS VALUES (2003,'Tesla Inc',893.81,'TSLA')
       INSERT INTO STOCKS VALUES (2004,'Alphabet Inc',115.24,'GOOG')
       INSERT INTO STOCKS VALUES (2005,'NVIDIA Corp',184.72,'NVDA')
       INSERT INTO STOCKS VALUES (2006,'Meta Platforms Inc',159.96,'META')
       INSERT INTO STOCKS VALUES (2007,'PepsiCo Inc',177.39,'PEP')
       INSERT INTO STOCKS VALUES (2008,'Adobe Inc',412.00,'ADBE')
       INSERT INTO STOCKS VALUES (2009,'Cisco Systems Inc',45.36,'CSCO')
       INSERT INTO STOCKS VALUES (2010,'T-Mobile US Inc',143.65,'TMUS')
       INSERT INTO STOCKS VALUES (2012,'Comcast Corp',37.51,'CMCSA')
       INSERT INTO STOCKS VALUES (2013,'Intel Corp',37.00,'INTC')
       INSERT INTO STOCKS VALUES (2014,'Amgen Inc',245.64,'AMGN')
       INSERT INTO STOCKS VALUES (2015,'Intuit Inc',448.50,'INTU')
       INSERT INTO STOCKS VALUES (2016,'PayPal Holdings Inc',89.00,'PYPL')
       INSERT INTO STOCKS VALUES (2017,'Netflix Inc',226.08,'NFLX')
        INSERT INTO STOCKS VALUES (2018,'Starbucks Corp',84.86,'SBUX')
        INSERT INTO STOCKS VALUES (2019,'Analog Devices Inc',171.85,'ADI')
        INSERT INTO STOCKS VALUES (2020,'Gilead Sciences Inc',59.60,'GILD')
        INSERT INTO STOCKS VALUES (2021,'CSX Corp',32.50,'CSX')
       INSERT INTO STOCKS VALUES (2022,'Fiserv Inc',106.34,'FISV')



--BONDS TABLE
      INSERT INTO BONDS VALUES (1,'BBG GLOBAL BOND',160.00,'12/15/2031',5.8)
       INSERT INTO BONDS VALUES (2,'HIGHYIELD GLOBAL BOND',110,'11/12/2031',5.8)
       INSERT INTO BONDS VALUES (3,'Fidelity U.S. Bond Index Fund',125.00,'12/05/2028',2.10)
       INSERT INTO BONDS VALUES (4,'Vanguard Total Bond Market Index Fund',114,'06/05/2029',2.10)
       INSERT INTO BONDS VALUES (5,'Fidelity Total Bond Fund',98,'12/05/2030',3.15)
       INSERT INTO BONDS VALUES (6,'Schwab U.S. Aggregate Bond Index Fund',104.2,'07/05/2026',2.19)
       INSERT INTO BONDS VALUES (7,'BNY Mellon Bond Market Index Fund',96.23,'07/02/2025',1.98)
       INSERT INTO BONDS VALUES (8,'Northern Trust Bond Index',103.28,'11/02/2036',3.19)
       INSERT INTO BONDS VALUES (9,'T. Rowe Price QM U.S. Bond Index Fund',101.23,'04/06/2029',3.45)
	   
	   
	   

--BONDS CUSTOMER,CREDENTIALS,CUSTOMERADDRESS,ACCOUNT
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100001,'Uday','Siddharth',
       '01/01/1995','132456777','1234567891',700,'udaysid@gmail.com',
       'PANCARD','HRFPK013DR')
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (1,100001,'uday','sid78sa','CUSTOMER')
INSERT INTO CUSTOMERADDRESS VALUES (1,100001,'Apartment','Boylston Street','Lansing','Michigan',22215)
-- INSERT INTO CREDENTIALS VALUES (21,100001,'uday','sid78sa','CUSTOMER')
INSERT ACCOUNT VALUES (100001,100001,'SAVINGS',10000)

--2 CUSTOMER 
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100002,'Venkatesh','V',
       '09/12/1993','456719572','6479922684',450,'venks123@gmail.com',
       'PASSPORT','R824954')
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (2,100002,'ven','venky@123','CUSTOMER')
INSERT ACCOUNT VALUES (100002,100002,'SAVINGS',10000)
INSERT INTO CUSTOMERADDRESS VALUES (2,100002,'Apartment','Ruggles Street','Jackson','Mississippi',21240)


--3 CUSTOMER 
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100003,'Arjun','Raja',
       '09/04/1996','486517981','5478917853',500,'arjun@gmail.com',
       'PAN CARD','GFDRK013RT')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (3,100003,'arjun','arjun9fee','CUSTOMER')
       INSERT ACCOUNT VALUES (100003,100003,'SAVINGS',15847)
       INSERT INTO CUSTOMERADDRESS VALUES (3,100003,'Apartment','Fremont Street','Concord','New Hampshire',31570)


--4 CUSTOMER
 INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100004,'Nikil','Sayane',
       '11/02/1994','486259371','6175486279',600,'nikil@gmail.com',
       'PAN CARD','FIEPF8593B')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (4,100004,'nikil','niksdfe79','CUSTOMER')
       INSERT ACCOUNT VALUES (100004,100004,'SAVINGS',47862)
       INSERT INTO CUSTOMERADDRESS VALUES (4,100004,'Apartment','Forest Street','Columbia','South Carolina',75496)

--5 CUSTOMER
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100005,'Raksha','Raju',
       '11/06/1994','635798489','6789547632',630,'raksha@gmail.com',
       'PASSPORT','E857634')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (5,100005,'raksha','raksha34534','CUSTOMER')
       INSERT ACCOUNT VALUES (100005,100005,'SAVINGS',34895)
       INSERT INTO CUSTOMERADDRESS VALUES (5,100005,'Apartment','Froyll Street','Olympia','Washington',63548)



--6 CUSTOMER
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100006,'Neha','Sayane',
       '03/09/1994','852749631','6374895782',680,'neha@gmail.com',
       'PASSPORT','T097634')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (6,100006,'neha','neha84305','CUSTOMER')
       INSERT ACCOUNT VALUES (100006,100006,'SAVINGS',54895)
       INSERT INTO CUSTOMERADDRESS VALUES (6,100006,'Cond0','Forest Street','Austin','Texas',57548)


--7 CUSTOMER
 INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100007,'Samarth','Giri',
       '05/09/1995','538741987','6574189387',700,'samarth@gmail.com',
       'PASSPORT','P015634')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (7,100007,'samarth','samrt34505','CUSTOMER')
       INSERT ACCOUNT VALUES (100007,100007,'SAVINGS',26955)
       INSERT INTO CUSTOMERADDRESS VALUES (7,100007,'Single Family Home','Park Street','Providence','Rhode Island',45268)


--8 CUSTOMER
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100008,'Manoj','Kumar',
       '07/09/1998','247698153','8426517539',750,'manoj@gmail.com',
       'PASSPORT','K018630')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (8,100008,'manoj','manoj7486','CUSTOMER')
       INSERT ACCOUNT VALUES (100008,100008,'SAVINGS',44298)
       INSERT INTO CUSTOMERADDRESS VALUES (8,100008,'Single Family Home','Mission Main','Santa Fe','New Mexico',52765)

--9 CUSTOMER
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100009,'Monish','Srinivasa',
       '04/09/1995','568741238','6179586324',730,'monish@gmail.com',
       'PASSPORT','L875609')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (9,100009,'monish','moni78fdg','CUSTOMER')
       INSERT ACCOUNT VALUES (100009,100009,'SAVINGS',51789)
       INSERT INTO CUSTOMERADDRESS VALUES (9,100009,'Multi Family Home','Huntingtob Main','Trenton','New Jersey',68156)

--10 CUSTOMER
 INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100010,'Vignesh','Babu',
       '06/19/1995','563849245','8672348967',690,'vignesh@gmail.com',
       'PASSPORT','W907454')
       INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (10,100010,'vignesh','vignesh8464','CUSTOMER')
       INSERT ACCOUNT VALUES (100010,100010,'SAVINGS',54868)
       INSERT INTO CUSTOMERADDRESS VALUES (10,100010,'Apartment','Qunicy Main','Albany','New York',42398)
       
       
  INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100011,'ANITA','MISHRA',
       '07/22/1999','789465001','6974626471',450,'a.mishra@gmail.com',
       'PAN CARD','GDBPS3461F');
	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (11,100011,'a.mishra','anita123','CUSTOMER');
	INSERT ACCOUNT VALUES (100011,100011,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (22,100011,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Apartment','Boylston Street','Lansing','Michigan',02120);


INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100012,'RASHMI','PATIL',
       '01/24/1995','386496377','9004126891',490,'rashmi.p@gmail.com',
       'PAN CARD','AIBPS9401F');
	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (12,100012,'rashmi.p','rashmi902','CUSTOMER');
	INSERT ACCOUNT VALUES (100012,100012,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (12,100012,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (12,12,'Single Family Home','Park Street','Concord','Mississippi',22015);
--

--      
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100013,'SNEHAL','SARODE',
       '07/22/1994','989466071','1904626591',700,'s.sarode@gmail.com',
       'PAN CARD','RDBQS3461F');
	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (13,100013,'s.sarode','sneha986','CUSTOMER');
	INSERT ACCOUNT VALUES (100013,100013,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (13,100013,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Multi Family Home','Alphonsus Street','Santa Fe','South Carolina',22210);

   

INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100014,'PRAJAKTA','SABLE',
       '10/28/1994','249786001','3406658592',500,'p.sable94@gmail.com',
       'PAN CARD','RAPQS0061N');
	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (14,100014,'p.sable94','praj123','CUSTOMER');
	INSERT ACCOUNT VALUES (100014,100014,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (14,100014,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Apartment','Harvard Street','Albany','Texas',23215);




INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100015,'SANYUKTA','PATIL',
       '10/28/1994','249786002','3406658092',700,'sanyu123@gmail.com',
       'PAN CARD','NAPQS0061A');

	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (15,100015,'sanyu123','sanyu1234','CUSTOMER');
	INSERT ACCOUNT VALUES (100015,100015,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (15,100015,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Apartment','Boylston Street','Trenton','New York',22210);



INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100016,'RAJ','PATEL',
       '05/15/1989','309987002','1094626098',800,'raj.patel@gmail.com',
       'PAN CARD','SARQT0001A');

	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (16,100016,'raj.patel','raj745','CUSTOMER');
	INSERT ACCOUNT VALUES (100016,100016,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (16,100016,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Single Family Home','Park Street','Providence','New Jersey',20015);



INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100017,'SAMRAT','SINGH',
       '11/21/1993','207387010','9004526390',430,'sam.singh@gmail.com',
       'PAN CARD','QPRET1071S');

	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (17,100017,'sam.singh','sam863','CUSTOMER');
	INSERT ACCOUNT VALUES (100017,100017,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (17,100017,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Multi Family Home','Tremont Street','Jackson','Washington',20215);



INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100018,'MADDY','ROLLI',
       '11/15/1980','108580011','1004329391',794,'m.rolli@gmail.com',
       'PAN CARD','AHAET2081R');

	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (18,100018,'m.rolli','rolli122','CUSTOMER');
	INSERT ACCOUNT VALUES (100018,100018,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (18,100018,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Apartment','Longwood Area','Lansing','Rhode Island',22235);



INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100019,'AKANKSHYA','SADHYE',
       '02/11/2000','400560001','5094323392',700,'aka.sadhye@gmail.com',
       'PAN CARD','ZASET3091S');

	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (19,100019,'aka.sadhye','aka1239','CUSTOMER');
	INSERT ACCOUNT VALUES (100019,100019,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (19,100019,'Apartment','Qunicy Main','Albany','New York',42398)

--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Apartment','Tremont Street','Austin','Texas',23215);



INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100020,'KUNAL','KADAM',
       '11/29/1999','710460072','2900623508',707,'kadam.k@gmail.com',
       'PAN CARD','GDBPS8045B');

	INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (20,100020,'kadam.k','kunal123','CUSTOMER');
	INSERT ACCOUNT VALUES (100020,100020,'SAVINGS',54868)
    INSERT INTO CUSTOMERADDRESS VALUES (20,100020,'Apartment','Qunicy Main','Albany','New York',42398)


INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100021,'SAUMITRA','JOSHI','11/29/1983','906460471','2000613109',707,'saumitra.j@gmail.com','PAN CARD','GDBPS8045A');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100022,'ANIL','RAUT','12/06/1973','139462070','3900012408',400,'raut.anil@gmail.com','PAN CARD','GDBPO8945L');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100023,'ASMITA','RANE','07/07/1980','854321072','2900952900',500,'rane.a@gmail.com','PAN CARD','ADBPS8942A');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100024,'NAMRATA','MISHRA','03/13/1978','123410000','3104613500',650,'namrata.m@gmail.com','PAN CARD','SPBPS8025A');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100025,'AVNI','BHARAMBE','03/12/1975','119460112','1909223501',450,'bharambe.a@gmail.com','PAN CARD','ADFPS9063R');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100026,'SANA','JOSHI','12/29/1959','109934589','1134567505',300,'sana.j@gmail.com','PAN CARD','BDGDS9063R');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100027,'KARISHMA','TANNA','02/10/1960','239663071','1002002409',400,'k.tanna@gmail.com','PAN CARD','GNTPO8945L');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100028,'AARUSHI','JAIN','03/15/1965','950001021','2900952900',500,'a.jain@gmail.com','PAN CARD','MNORO8945A');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100029,'PRAKASH','DOSHI','06/18/1955','923400021','3234567500',800,'doshi.p@gmail.com','PAN CARD','ARMNS9025B');
INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (100030,'ATIN','MUKHARJEE','12/29/1959','119434589','2134567501',300,'atin.m@gmail.com','PAN CARD','ERPDS9063R');

INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (22,100021,'saumitra.j','saum123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (23,100022,'raut.anil','anil123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (24,100023,'rane.a','ranea123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (25,100024,'namrata.m','namrata.m1','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (26,100025,'bharambe.a','bharambe123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (27,100026,'sana.j','sana123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (28,100027,'k.tanna','kari123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (29,100028,'arsuhij','arushi123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (30,100029,'doshi.p','doshi123','CUSTOMER');
INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (31,100030,'atin.m','atin123','CUSTOMER');

INSERT INTO CUSTOMERADDRESS VALUES (21,100021,'Apartment','Tremont Street','Lansing','Michigan',22235);
INSERT INTO CUSTOMERADDRESS VALUES (23,100023,'Apartment','Saturn Street','Concord','Mississippi',22223);
INSERT INTO CUSTOMERADDRESS VALUES (24,100024,'Single Family Home','Boylston Street','Trenton','New Jersey',22215);
INSERT INTO CUSTOMERADDRESS VALUES (25,100025,'Apartment','Boylston Street','Lansing','Michigan',22215);
INSERT INTO CUSTOMERADDRESS VALUES (26,100026,'Apartment','Boylston Street','Olympia','Michigan',22215);
INSERT INTO CUSTOMERADDRESS VALUES (27,100027,'Apartment','Longwood Street','Lansing','South Carolina',22215);
INSERT INTO CUSTOMERADDRESS VALUES (28,100028,'Apartment','Tremont Street','Jackson','Michigan',22215);
INSERT INTO CUSTOMERADDRESS VALUES (29,100029,'Apartment','Symphony Street','Austin','New Hampshire',22215);
INSERT INTO CUSTOMERADDRESS VALUES (30,100030,'Apartment','Boylston Street','Trenton','Washington',22215);


--INSERT INTO CUSTOMERADDRESS VALUES (11,11,'Single Family Home','Alphonsus Street','Olympia','New Jersey',20415);



INSERT INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,DOB,SSN,PHONENUMBER,
       CREDITSCORE,EMAILID,IDENTIFICATIONDOCUMENT,IDENTIFICATIONID) VALUES (1,'ADMIN','ADMIN',
       '11/29/1990','710460072','2900623508',600,'admin@gmail.com',
       'PAN CARD','GDBPS8045B');

    INSERT INTO CREDENTIALS(CREDENTIALID,CUSTOMERID,USERNAME,PASSWORD,CUSTOMERTYPE) VALUES (21,1,'admin','admin','ADMIN');
    GO

 EXEC [CASHIERREQUEST] @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID =100001,@AMOUNTTODEPOSIT =10054.0 
 GO
 EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=1,@STATUS='APPROVED' 
 GO 

  EXEC [CASHIERREQUEST] @USERNAME ='ven',@PASSWORD = 'venky@123', @CUSTOMERID =100002,@AMOUNTTODEPOSIT =5397.0 
  GO 
       EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=2,@STATUS='APPROVED' 
       GO 

 EXEC [CASHIERREQUEST] @USERNAME ='arjun',@PASSWORD = 'arjun9fee', @CUSTOMERID =100003,@AMOUNTTODEPOSIT =9745.0 
 GO 
       EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=3,@STATUS='APPROVED' 
       GO 

 EXEC [CASHIERREQUEST] @USERNAME ='nikil',@PASSWORD = 'niksdfe79', @CUSTOMERID =100004,@AMOUNTTODEPOSIT =9745.0 
 GO 

  EXEC [CASHIERREQUEST] @USERNAME ='raksha',@PASSWORD = 'raksha34534', @CUSTOMERID =100005,@AMOUNTTODEPOSIT =9745.0 
  GO 
       EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=5,@STATUS='APPROVED' 
       GO 

  EXEC [CASHIERREQUEST] @USERNAME ='neha',@PASSWORD = 'neha84305', @CUSTOMERID =100006,@AMOUNTTODEPOSIT =9745.0  
  GO
       EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=6,@STATUS='APPROVED'  
       GO


  EXEC [CASHIERREQUEST] @USERNAME ='samarth',@PASSWORD = 'samrt34505', @CUSTOMERID =100007,@AMOUNTTODEPOSIT =5371.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=7,@STATUS='APPROVED' 
  GO

   EXEC [CASHIERREQUEST] @USERNAME ='manoj',@PASSWORD = 'manoj7486', @CUSTOMERID =100008,@AMOUNTTODEPOSIT =17460.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=8,@STATUS='APPROVED' 
  GO

   EXEC [CASHIERREQUEST] @USERNAME ='monish',@PASSWORD = 'moni78fdg', @CUSTOMERID =100009,@AMOUNTTODEPOSIT =13874.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=9,@STATUS='APPROVED' 
  GO

   EXEC [CASHIERREQUEST] @USERNAME ='vignesh',@PASSWORD = 'vignesh8464', @CUSTOMERID =100010,@AMOUNTTODEPOSIT =4287.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=10,@STATUS='APPROVED' 
  GO

  EXEC [CASHIERREQUEST] @USERNAME ='a.mishra',@PASSWORD = 'anita123', @CUSTOMERID =100011,@AMOUNTTODEPOSIT =6924.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=11,@STATUS='APPROVED' 
  GO


   EXEC [CASHIERREQUEST] @USERNAME ='rashmi.p',@PASSWORD = 'rashmi902', @CUSTOMERID =100012,@AMOUNTTODEPOSIT =6924.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=12,@STATUS='APPROVED' 
  GO


   EXEC [CASHIERREQUEST] @USERNAME ='s.sarode',@PASSWORD = 'sneha986', @CUSTOMERID =100013,@AMOUNTTODEPOSIT =8746.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=13,@STATUS='APPROVED' 
  GO


  EXEC [CASHIERREQUEST] @USERNAME ='p.sable94',@PASSWORD = 'praj123', @CUSTOMERID =100014,@AMOUNTTODEPOSIT =2562.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=14,@STATUS='APPROVED' 
  GO


   EXEC [CASHIERREQUEST] @USERNAME ='sanyu123',@PASSWORD = 'sanyu1234', @CUSTOMERID =100015,@AMOUNTTODEPOSIT =4869.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=15,@STATUS='APPROVED' 
  GO

   EXEC [CASHIERREQUEST] @USERNAME ='uday',@PASSWORD = 'sid78sa', @CUSTOMERID =100001,@AMOUNTTODEPOSIT =48699.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=16,@STATUS='APPROVED' 
  GO


   EXEC [CASHIERREQUEST] @USERNAME ='ven',@PASSWORD = 'venky@123', @CUSTOMERID =100002,@AMOUNTTODEPOSIT =38699.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=17,@STATUS='APPROVED' 
  GO


   EXEC [CASHIERREQUEST] @USERNAME ='arjun',@PASSWORD = 'arjun9fee', @CUSTOMERID =100003,@AMOUNTTODEPOSIT =87694.0 
  GO
EXEC CASHERREQUESTDECISION @USERNAME='admin',@PASSWORD='admin',@DEPOSITREQUESTID=18,@STATUS='APPROVED' 
  GO



  EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Soybeans',
       @COMMODITYPRICE =109
       GO


--ASSETS
EXEC CustomerAssetInsert @USERNAME = 'uday', @PASSWORD = 'sid78sa', @AID= 1, @CUSTOMERID = 100001, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\uday\OneDrive - Northeastern University\Pictures.png', @AVALUE = 9700.00;

EXEC CustomerAssetInsert @USERNAME = 'ven', @PASSWORD = 'saum123', @AID= 2, @CUSTOMERID = 100002, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\a.mishra\OneDrive - Northeastern University\Pictures.png', @AVALUE = 8000.00;

EXEC CustomerAssetInsert @USERNAME = 'arjun', @PASSWORD = 'arjun9fee', @AID= 3, @CUSTOMERID = 100003, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\arjun\OneDrive - Northeastern University\Pictures.png', @AVALUE = 90009.00;

EXEC CustomerAssetInsert @USERNAME = 'nikil', @PASSWORD = 'niksdfe79', @AID= 4, @CUSTOMERID = 100004, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\nikil\OneDrive - Northeastern University\Pictures.png', @AVALUE = 30003.00;

EXEC CustomerAssetInsert @USERNAME = 'raksha', @PASSWORD = 'raksha34534', @AID= 5, @CUSTOMERID = 100005, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\raksha\OneDrive - Northeastern University\Pictures.png', @AVALUE = 60009.00;

EXEC CustomerAssetInsert @USERNAME = 'neha', @PASSWORD = 'sid78sa', @AID= 6, @CUSTOMERID = 100006, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\neha\OneDrive - Northeastern University\Pictures.png', @AVALUE = 7700.00;

EXEC CustomerAssetInsert @USERNAME = 'samarth', @PASSWORD = 'samrt34505', @AID= 7, @CUSTOMERID = 100007, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\samarth\OneDrive - Northeastern University\Pictures.png', @AVALUE = 1000.00;

EXEC CustomerAssetInsert @USERNAME = 'arjun', @PASSWORD = 'manoj7486', @AID= 8, @CUSTOMERID = 100008, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\manoj\OneDrive - Northeastern University\Pictures.png', @AVALUE = 20009.00;

EXEC CustomerAssetInsert @USERNAME = 'monish', @PASSWORD = 'moni78fdg', @AID= 9, @CUSTOMERID = 100009, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\nikil\OneDrive - Northeastern University\Pictures.png', @AVALUE = 30003.00;

EXEC CustomerAssetInsert @USERNAME = 'vignesh', @PASSWORD = 'vignesh8464', @AID= 10, @CUSTOMERID = 100010, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\vignesh\OneDrive - Northeastern University\Pictures.png', @AVALUE = 60009.00;


EXEC CustomerAssetInsert @USERNAME = 'a.mishra', @PASSWORD = 'saum123', @AID= 11, @CUSTOMERID = 100011, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\a.mishra\OneDrive - Northeastern University\Pictures.png', @AVALUE = 9000.00;

EXEC CustomerAssetInsert @USERNAME = 'rashmi.p', @PASSWORD = 'saum123', @AID= 12, @CUSTOMERID = 100012, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\rashmi.p\OneDrive - Northeastern University\Pictures.png', @AVALUE = 12000.00;

EXEC CustomerAssetInsert @USERNAME = 's.sarode', @PASSWORD = 'saum123', @AID= 13, @CUSTOMERID = 100013, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\s.sarode\OneDrive - Northeastern University\Pictures.png', @AVALUE = 10004.00;

EXEC CustomerAssetInsert @USERNAME = 'p.sable94', @PASSWORD = 'praj123', @AID= 14, @CUSTOMERID = 100014, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\p.sable94\OneDrive - Northeastern University\Pictures.png', @AVALUE = 80000.00;

EXEC CustomerAssetInsert @USERNAME = 'sanyu123', @PASSWORD = 'sanyu1234', @AID= 15, @CUSTOMERID = 100015, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\saumitra.j\OneDrive - Northeastern University\Pictures.png', @AVALUE = 90000.00;

EXEC CustomerAssetInsert @USERNAME = 'raj.patel', @PASSWORD = 'raj745', @AID= 16, @CUSTOMERID = 100016, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\raj.patel\OneDrive - Northeastern University\Pictures.png', @AVALUE = 9000.00;

EXEC CustomerAssetInsert @USERNAME = 'sam.singh', @PASSWORD = 'sam863', @AID= 17, @CUSTOMERID = 100017, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\sam.singh\OneDrive - Northeastern University\Pictures.png', @AVALUE = 12000.00;

EXEC CustomerAssetInsert @USERNAME = 'm.rolli', @PASSWORD = 'rolli122', @AID= 18, @CUSTOMERID = 100018, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\m.rolli\OneDrive - Northeastern University\Pictures.png', @AVALUE = 10004.00;

EXEC CustomerAssetInsert @USERNAME = 'aka.sadhye', @PASSWORD = 'aka1239', @AID= 19, @CUSTOMERID = 100019, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\aka.sadhye\OneDrive - Northeastern University\Pictures.png', @AVALUE = 80000.00;

EXEC CustomerAssetInsert @USERNAME = 'kadam.k', @PASSWORD = 'kunal123', @AID= 20, @CUSTOMERID = 100020, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\kadam.k\OneDrive - Northeastern University\Pictures.png', @AVALUE = 90000.00;

EXEC CustomerAssetInsert @USERNAME = 'saumitra.j', @PASSWORD = 'saum123', @AID= 21, @CUSTOMERID = 100021, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\saumitra.j\OneDrive - Northeastern University\Pictures.png', @AVALUE = 10000.00;


EXEC CustomerAssetInsert @USERNAME = 'raut.anil', @PASSWORD = 'anil123', @AID= 22, @CUSTOMERID = 100022, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\raut.anil\OneDrive - Northeastern University\Pictures.png', @AVALUE = 20000.00;


EXEC CustomerAssetInsert @USERNAME = 'rane.a', @PASSWORD = 'ranea123', @AID= 23, @CUSTOMERID = 100023, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\ranea123\OneDrive - Northeastern University\Pictures.png', @AVALUE = 30000.00;


EXEC CustomerAssetInsert @USERNAME = 'namrata.m', @PASSWORD = 'namrata.m1', @AID= 24, @CUSTOMERID = 100024, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\r.kagadaluraju\OneDrive - Northeastern University\Pictures.png', @AVALUE = 40400.00;


EXEC CustomerAssetInsert @USERNAME = 'bharambe.a', @PASSWORD = 'bharambe123', @AID= 25, @CUSTOMERID = 100025, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\bharambe.a\OneDrive - Northeastern University\Pictures.png', @AVALUE = 60000.00;


EXEC CustomerAssetInsert @USERNAME = 'sana.j', @PASSWORD = 'sana123', @AID= 26, @CUSTOMERID = 100026, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\sana.j\OneDrive - Northeastern University\Pictures.png', @AVALUE = 70000.00;


EXEC CustomerAssetInsert @USERNAME = 'k.tanna', @PASSWORD = 'kari123', @AID= 27, @CUSTOMERID = 100027, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\k.tanna\OneDrive - Northeastern University\Pictures.png', @AVALUE = 50000.00;


EXEC CustomerAssetInsert @USERNAME = 'arsuhij', @PASSWORD = 'arushi123', @AID= 28, @CUSTOMERID = 100028, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\arsuhij\OneDrive - Northeastern University\Pictures.png', @AVALUE = 19000.00;


EXEC CustomerAssetInsert @USERNAME = 'doshi.p', @PASSWORD = 'doshi123', @AID= 29, @CUSTOMERID = 100029, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\doshi.p\OneDrive - Northeastern University\Pictures.png', @AVALUE = 10000.00;


EXEC CustomerAssetInsert @USERNAME = 'atin.m', @PASSWORD = 'atin123', @AID= 30, @CUSTOMERID = 100030, @ATYPE = 'Profile image', 
@AIMAGE ='C:\Users\atin.m\OneDrive - Northeastern University\Pictures.png', @AVALUE = 10000.00;

--- MOCK THE TRADES 

EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 3,@INVESTMENTID =2004,@TRADETYPE = 'BUY'


EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 3,@INVESTMENTID =2008,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 7,@INVESTMENTID =2003,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 3,@INVESTMENTID =2004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 9,@INVESTMENTID =2005,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 3,@INVESTMENTID =2009,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 8,@INVESTMENTID =2001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 3,@INVESTMENTID =2005,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 5,@INVESTMENTID =2006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 10,@INVESTMENTID =2001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 9,@INVESTMENTID =2010,@TRADETYPE = 'BUY'




EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 3,@INVESTMENTID =2018,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 7,@INVESTMENTID =2013,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 3,@INVESTMENTID =2014,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 9,@INVESTMENTID =2015,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 3,@INVESTMENTID =2009,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 8,@INVESTMENTID =2012,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 3,@INVESTMENTID =2005,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 5,@INVESTMENTID =2006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 10,@INVESTMENTID =2019,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 9,@INVESTMENTID =2010,@TRADETYPE = 'BUY'




EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 10,@INVESTMENTID =2001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID =2003,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 20,@INVESTMENTID =2004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 9,@INVESTMENTID =2019,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID =2002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID =2012,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 3,@INVESTMENTID =2004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 5,@INVESTMENTID =2006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 10,@INVESTMENTID =2010,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 9,@INVESTMENTID =2006,@TRADETYPE = 'BUY'




EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 10,@INVESTMENTID=1001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 10,@INVESTMENTID=1001,@TRADETYPE = 'BUY'

EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID=1003,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 20,@INVESTMENTID=1004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 9,@INVESTMENTID=1009,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID=1002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID=1002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 3,@INVESTMENTID=1004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 5,@INVESTMENTID=1006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 10,@INVESTMENTID=1001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 9,@INVESTMENTID=1006,@TRADETYPE = 'BUY'


EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 10,@INVESTMENTID=1,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID=3,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 20,@INVESTMENTID=4,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 9,@INVESTMENTID=9,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID=2,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 8,@INVESTMENTID=2,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 3,@INVESTMENTID=4,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 5,@INVESTMENTID=6,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 10,@INVESTMENTID=1,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 9,@INVESTMENTID=6,@TRADETYPE = 'BUY'



EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 10,@INVESTMENTID =2012,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 8,@INVESTMENTID =2013,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 20,@INVESTMENTID =2014,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 9,@INVESTMENTID =2009,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 8,@INVESTMENTID =2002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 8,@INVESTMENTID =2012,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 3,@INVESTMENTID =2004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 5,@INVESTMENTID =2006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 10,@INVESTMENTID =2010,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='s.sarode',@PASSWORD = 'sneha986',@CUSTOMERID = 100013,@ORDERQTY = 9,@INVESTMENTID =2006,@TRADETYPE = 'BUY'

EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 10,@INVESTMENTID=1001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 8,@INVESTMENTID=1003,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 20,@INVESTMENTID=1004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 9,@INVESTMENTID=1009,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 8,@INVESTMENTID=1002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 8,@INVESTMENTID=1002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 3,@INVESTMENTID=1004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 5,@INVESTMENTID=1006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 10,@INVESTMENTID=1001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 9,@INVESTMENTID=1006,@TRADETYPE = 'BUY'

EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 10,@INVESTMENTID=2001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 8,@INVESTMENTID=2003,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 20,@INVESTMENTID=2004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 9,@INVESTMENTID=2009,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 8,@INVESTMENTID=2002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 8,@INVESTMENTID=2002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 3,@INVESTMENTID=2004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 5,@INVESTMENTID=2006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 10,@INVESTMENTID=2001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='sam.singh',@PASSWORD = 'sam863',@CUSTOMERID = 100017,@ORDERQTY = 9,@INVESTMENTID=2006,@TRADETYPE = 'BUY'

EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 10,@INVESTMENTID=1001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 8,@INVESTMENTID=1003,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 20,@INVESTMENTID=1004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 9,@INVESTMENTID=1009,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 8,@INVESTMENTID=1002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 8,@INVESTMENTID=1002,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 3,@INVESTMENTID=1004,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 5,@INVESTMENTID=1006,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 10,@INVESTMENTID=1001,@TRADETYPE = 'BUY'
EXEC dbo.TRADE @USERNAME ='kadam.k',@PASSWORD = 'kunal123',@CUSTOMERID = 100020,@ORDERQTY = 9,@INVESTMENTID=1006,@TRADETYPE = 'BUY'


EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'APPLE', @STOCKPRICE = 102.894, @TICKERSYMBOL = 'AAPL' 
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'MICROSOFT', @STOCKPRICE = 101.455, @TICKERSYMBOL = 'MSFT' 
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'Tesla Inc', @STOCKPRICE = 899.43, @TICKERSYMBOL = 'TSLA' 
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'Alphabet Inc', @STOCKPRICE = 111.122, @TICKERSYMBOL = 'GOOG' 
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'NVIDIA Corp', @STOCKPRICE = 199.89, @TICKERSYMBOL = 'NVDA' 
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'Meta Platforms Inc', @STOCKPRICE = 162.0, @TICKERSYMBOL = 'META' 
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'PepsiCo Inc', @STOCKPRICE = 199.455, @TICKERSYMBOL = 'PEP'
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'Adobe Inc', @STOCKPRICE = 427.78, @TICKERSYMBOL = 'ADBE'
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'Cisco Systems Inc', @STOCKPRICE = 49.45, @TICKERSYMBOL = 'CSCO'
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'Analog Devices Inc', @STOCKPRICE = 130.8500, @TICKERSYMBOL = 'ADI'
EXEC dbo.ADDSTOCKS @USERNAME='admin', @PASSWORD = 'admin',@STOCKNAME = 'CSX Corp', @STOCKPRICE = 29.500, @TICKERSYMBOL = 'CSX'


EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='BBG GLOBAL BOND',
       @BONDPRICE =170,@MATURITYDATE ='2031-12-15',@BONDYIELD= 5.8
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='HIGHYIELD GLOBAL BOND',
       @BONDPRICE =120,@MATURITYDATE ='2031-11-12',@BONDYIELD= 5.6
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='Fidelity U.S. Bond Index Fund',
       @BONDPRICE =134,@MATURITYDATE ='2028-12-05',@BONDYIELD= 2.4
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='Vanguard Total Bond Market Index Fund',
       @BONDPRICE =123,@MATURITYDATE ='2029-06-05',@BONDYIELD= 2.1
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='Fidelity Total Bond Fund',
       @BONDPRICE =105,@MATURITYDATE ='2030-12-05',@BONDYIELD= 3.2
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='Schwab U.S. Aggregate Bond Index Fund',
       @BONDPRICE =111.25,@MATURITYDATE ='2026-07-05',@BONDYIELD= 2.2
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='BNY Mellon Bond Market Index Fund',
       @BONDPRICE =99.55,@MATURITYDATE ='2025-07-02',@BONDYIELD= 1.98
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='Northern Trust Bond Index',
       @BONDPRICE =105.35,@MATURITYDATE ='2036-11-02',@BONDYIELD= 3.19
EXEC [ADDBONDS] @USERNAME='admin',@PASSWORD='admin',@BONDNAME ='T. Rowe Price QM U.S. Bond Index Fund',
       @BONDPRICE =104.35,@MATURITYDATE ='2029-04-06',@BONDYIELD= 3.55

EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Soybeans',
       @COMMODITYPRICE =110
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='WTI Crude Oil',
       @COMMODITYPRICE =94.25
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Uranium',
       @COMMODITYPRICE =27.2
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Brent Crude Oil',
       @COMMODITYPRICE =101.2
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Natural Gas',
       @COMMODITYPRICE =8.35
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Silver',
       @COMMODITYPRICE =20.8
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Corn',
       @COMMODITYPRICE =615.20
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Wheat',
       @COMMODITYPRICE =801.65
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Platinum',
       @COMMODITYPRICE =905.45
    EXEC [ADDCOMMODITY] @USERNAME='admin',@PASSWORD='admin',@COMMODITYNAME ='Copper',
       @COMMODITYPRICE =3.65

EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 1,@INVESTMENTID =2008,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 3,@INVESTMENTID =2003,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 2,@INVESTMENTID =2004,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 4,@INVESTMENTID =2005,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 2,@INVESTMENTID =2009,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 1,@INVESTMENTID =2001,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 1,@INVESTMENTID =2005,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 1,@INVESTMENTID =2006,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 5,@INVESTMENTID =2001,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID = 100001,@ORDERQTY = 4,@INVESTMENTID =2010,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 1,@INVESTMENTID =2018,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 7,@INVESTMENTID =2013,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 1,@INVESTMENTID =2014,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 1,@INVESTMENTID =2015,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 1,@INVESTMENTID =2009,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 6,@INVESTMENTID =2012,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 1,@INVESTMENTID =2005,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 2,@INVESTMENTID =2006,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 1,@INVESTMENTID =2019,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='ven',@PASSWORD = 'venky@123',@CUSTOMERID = 100002,@ORDERQTY = 4,@INVESTMENTID =2010,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 1,@INVESTMENTID =2001,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 7,@INVESTMENTID =2003,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 2,@INVESTMENTID =2004,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 7,@INVESTMENTID =2019,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 1,@INVESTMENTID =2002,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 1,@INVESTMENTID =2012,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 15,@INVESTMENTID =2004,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 1,@INVESTMENTID =2006,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 2,@INVESTMENTID =2010,@TRADETYPE = 'SELL'
EXEC dbo.TRADE @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID = 100003,@ORDERQTY = 1,@INVESTMENTID =2006,@TRADETYPE = 'SELL'



EXEC [LOANREQUESTPROCEDURE] @USERNAME ='arjun',@PASSWORD ='arjun9fee', @LOANDURATION =24,@CUSTOMERID =100003,@INTERESTRATE =2.5,@LOANAMOUNT =10000
EXEC [LOANREQUESTPROCEDURE] @USERNAME ='monish',@PASSWORD ='moni78fdg', @LOANDURATION =36,@CUSTOMERID =100009,@INTERESTRATE =2.5,@LOANAMOUNT =24000
EXEC [LOANREQUESTPROCEDURE] @USERNAME ='uday',@PASSWORD ='sid78sa', @LOANDURATION =12,@CUSTOMERID =100001,@INTERESTRATE =5.2,@LOANAMOUNT =30000

EXEC [LOANREQUESTDECISION] @USERNAME ='admin',@PASSWORD ='admin', @LOANREQUESTID =2 ,@STATUS ='APPROVED'
EXEC [LOANREQUESTDECISION] @USERNAME ='admin',@PASSWORD ='admin',@LOANREQUESTID =3 ,@STATUS ='APPROVED'

EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2500

INSERT INTO FOREXCURRENCIES VALUES(1,'CNY',6.77)
INSERT INTO FOREXCURRENCIES VALUES(2,'INR',78.95)
INSERT INTO FOREXCURRENCIES VALUES(3,'JOD',0.71)
INSERT INTO FOREXCURRENCIES VALUES(4,'MXN',20.39)
INSERT INTO FOREXCURRENCIES VALUES(5,'NZD',1.58)
INSERT INTO FOREXCURRENCIES VALUES(6,'PKR',239.5)
INSERT INTO FOREXCURRENCIES VALUES(7,'LKR',358.12)
INSERT INTO FOREXCURRENCIES VALUES(8,'SGD',1.38)
INSERT INTO FOREXCURRENCIES VALUES(9,'CHF',0.95)
INSERT INTO FOREXCURRENCIES VALUES(10,'THB',36.13)
INSERT INTO FOREXCURRENCIES VALUES(11,'VND',23360.00)
INSERT INTO FOREXCURRENCIES VALUES(12,'XOF',640.50)
INSERT INTO FOREXCURRENCIES VALUES(13,'YER',250.25)
INSERT INTO FOREXCURRENCIES VALUES(14,'ZMW',16.41)


INSERT INTO FOREXCARDREQUESTS VALUES (1,100001,1,2000,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (2,100001,2,567,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (3,100001,3,1458,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (4,100002,4,5745,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (5,100002,6,145,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (6,100003,2,9851,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (7,100003,5,147,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (8,100004,1,785,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (9,100004,8,365,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (10,100005,6,457,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (11,100005,7,1587,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (12,100006,7,1781,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (13,100006,8,985,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (14,100007,9,569,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (15,100007,10,1574,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (16,100008,11,6000,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (17,100009,12,7598,GETDATE(),'REQUESTED')
INSERT INTO FOREXCARDREQUESTS VALUES (18,100010,13,248,GETDATE(),'REQUESTED')

EXEC APPROVEFOREXREQUEST @USERNAME ='admin', @PASSWORD ='admin', @REQUESTID =1
EXEC APPROVEFOREXREQUEST @USERNAME ='admin', @PASSWORD ='admin', @REQUESTID =2
EXEC APPROVEFOREXREQUEST @USERNAME ='admin', @PASSWORD ='admin', @REQUESTID =4
EXEC APPROVEFOREXREQUEST @USERNAME ='admin', @PASSWORD ='admin', @REQUESTID =5
EXEC APPROVEFOREXREQUEST @USERNAME ='admin', @PASSWORD ='admin', @REQUESTID =7
EXEC APPROVEFOREXREQUEST @USERNAME ='admin', @PASSWORD ='admin', @REQUESTID =9
EXEC APPROVEFOREXREQUEST @USERNAME ='admin', @PASSWORD ='admin', @REQUESTID =10


INSERT INTO CUSTOMERBENIFICIERIES VALUES(1,100006,'FRIEND', 100005);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(2,100006,'HOME', 100002);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(3,100003,'FAMILY', 100001);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(4,100006,'FRIEND', 100005);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(5,100006,'FAMILY', 100005);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(6,100002,'WIFE', 100003);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(7,100004,'FAMILY', 100008);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(8,100005,'FRIEND', 100009);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(9,100007,'FATHER', 100008);
INSERT INTO CUSTOMERBENIFICIERIES VALUES(10,100001,'BOSS', 100006);

EXEC [TRANSFERMONEY] @USERNAME ='uday',@PASSWORD = 'sid78sa',@CUSTOMERID =100001, @TOACCOUNTID = 100006,@AMOUNTTOTRANSFER = 500.0
EXEC [TRANSFERMONEY] @USERNAME ='samarth',@PASSWORD = 'samrt34505',@CUSTOMERID =100007, @TOACCOUNTID = 10000,@AMOUNTTOTRANSFER = 1500.0
EXEC [TRANSFERMONEY] @USERNAME ='raksha',@PASSWORD = 'raksha34534',@CUSTOMERID =100005, @TOACCOUNTID = 100009,@AMOUNTTOTRANSFER = 800.0
EXEC [TRANSFERMONEY] @USERNAME ='neha',@PASSWORD = 'neha84305',@CUSTOMERID =100006, @TOACCOUNTID = 100005,@AMOUNTTOTRANSFER = 960.0
EXEC [TRANSFERMONEY] @USERNAME ='arjun',@PASSWORD = 'arjun9fee',@CUSTOMERID =100003, @TOACCOUNTID = 100001,@AMOUNTTOTRANSFER = 2500.0
EXEC [TRANSFERMONEY] @USERNAME ='nikil',@PASSWORD = 'niksdfe79',@CUSTOMERID =100004, @TOACCOUNTID = 100008,@AMOUNTTOTRANSFER = 1200.0


EXEC [LOANREQUESTDECISION] @USERNAME ='admin',@PASSWORD ='admin', @LOANREQUESTID =1 ,@STATUS ='APPROVED'
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2000
EXEC [LOANREPAYMENT] @USERNAME ='arjun',@PASSWORD ='arjun9fee',@CUSTOMERID =100003,@AMOUNTTOTRANSFER =2500